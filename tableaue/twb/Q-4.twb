<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20251.25.0520.1026                               -->
<workbook original-version='18.1' source-build='2025.1.2 (20251.25.0520.1026)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06' inline='true' name='federated.17elh5p1wnfsis17afxk800qrr8t' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06' name='textscan.1go7yg714drblk110we6l06pw5cb'>
            <connection class='textscan' directory='C:/Users/User/Downloads' filename='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1go7yg714drblk110we6l06pw5cb' name='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' table='[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=';'>
            <column datatype='integer' name='Year' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='ISO' ordinal='2' />
            <column datatype='string' name='Disaster Group' ordinal='3' />
            <column datatype='string' name='Disaster Subroup' ordinal='4' />
            <column datatype='string' name='Disaster Type' ordinal='5' />
            <column datatype='string' name='Disaster Subtype' ordinal='6' />
            <column datatype='integer' name='Total Events' ordinal='7' />
            <column datatype='integer' name='Total Affected' ordinal='8' />
            <column datatype='integer' name='Total Deaths' ordinal='9' />
            <column datatype='integer' name='Total Damage (USD, original)' ordinal='10' />
            <column datatype='integer' name='Total Damage (USD, adjusted)' ordinal='11' />
            <column datatype='string' name='CPI' ordinal='12' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>ISO</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disaster Group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Disaster Group]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Disaster Group</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disaster Subroup</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Disaster Subroup]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Disaster Subroup</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disaster Type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Disaster Type]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Disaster Type</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disaster Subtype</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Disaster Subtype]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Disaster Subtype</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Events</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Events]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Total Events</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Affected</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Affected]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Total Affected</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Deaths]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Total Deaths</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Damage (USD, original)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Damage (USD, original)]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Total Damage (USD, original)</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Damage (USD, adjusted)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total Damage (USD, adjusted)]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>Total Damage (USD, adjusted)</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CPI</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CPI]</local-name>
            <parent-name>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv]</parent-name>
            <remote-alias>CPI</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='disaster probability' datatype='real' name='[Calculation_251075704402124800]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([Disaster Type]) / TOTAL(COUNT([Disaster Type]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <column caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' datatype='table' name='[__tableau_internal_object_id__].[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/User/AppData/Local/Temp/TableauTemp/#TableauTemp_0twdzb41f2fylj100wmrt1n6x01i.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='06/26/2025 10:30:27 PM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>0</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>139</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>1</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>254</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>ISO</remote-name>
              <remote-type>129</remote-type>
              <local-name>[ISO]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>ISO</remote-alias>
              <ordinal>2</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>254</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Disaster Group</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Disaster Group]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Disaster Group</remote-alias>
              <ordinal>3</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Disaster Subroup</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Disaster Subroup]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Disaster Subroup</remote-alias>
              <ordinal>4</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Disaster Type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Disaster Type]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Disaster Type</remote-alias>
              <ordinal>5</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>10</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Disaster Subtype</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Disaster Subtype]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Disaster Subtype</remote-alias>
              <ordinal>6</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>25</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Events</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Events]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Events</remote-alias>
              <ordinal>7</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>19</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Affected</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Affected]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Affected</remote-alias>
              <ordinal>8</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1963</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Deaths</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Deaths]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Deaths</remote-alias>
              <ordinal>9</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>496</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Damage (USD, original)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Damage (USD, original)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Damage (USD, original)</remote-alias>
              <ordinal>10</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>952</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Total Damage (USD, adjusted)</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Total Damage (USD, adjusted)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Total Damage (USD, adjusted)</remote-alias>
              <ordinal>11</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2680</approx-count>
              <contains-null>true</contains-null>
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>CPI</remote-name>
              <remote-type>129</remote-type>
              <local-name>[CPI]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>CPI</remote-alias>
              <ordinal>12</ordinal>
              <family>_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>126</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Arab Emirates (the)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Yemen Arab Rep&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cook Islands (the)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Northern Mariana Islands (the)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Helena, Ascension and Tristan da Cunha&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Soviet Union&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turks and Caicos Islands (the)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azores Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Germany Dem Rep&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan (Province of China)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gambia (the)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Palestine, State of&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United Kingdom of Great Britain and Northern Ireland (the)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Comoros (the)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Marshall Islands (the)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Niger (the)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russian Federation (the)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Yemen P Dem Rep&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Netherlands (the)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Virgin Island (British)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;CÃ´te dâ€™Ivoire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lao People&apos;s Democratic Republic (the)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas (the)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Germany Fed Rep&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canary Is&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Philippines (the)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia Montenegro&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tanzania, United Republic of&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Netherlands Antilles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Virgin Island (U.S.)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;RÃ©union&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Czech Republic (the)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United States of America (the)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Moldova (the Republic of)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Martin (French Part)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sudan (the)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo (the Democratic Republic of the)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Korea (the Democratic People&apos;s Republic of)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Yugoslavia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cayman Islands (the)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominican Republic (the)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Macedonia (the former Yugoslav Republic of)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czechoslovakia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Congo (the)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Korea (the Republic of)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint BarthÃ©lemy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='Year' />
        <field-sort-custom-order field='Country' />
        <field-sort-custom-order field='Calculation_251075704402124800' />
        <field-sort-custom-order field='ISO' />
        <field-sort-custom-order field='Disaster Group' />
        <field-sort-custom-order field='Disaster Subroup' />
        <field-sort-custom-order field='Disaster Type' />
        <field-sort-custom-order field='Disaster Subtype' />
        <field-sort-custom-order field='Total Events' />
        <field-sort-custom-order field='Total Affected' />
        <field-sort-custom-order field='Total Deaths' />
        <field-sort-custom-order field='Total Damage (USD, original)' />
        <field-sort-custom-order field='Total Damage (USD, adjusted)' />
        <field-sort-custom-order field='CPI' />
        <field-sort-custom-order field='Geometry (generated)' />
        <field-sort-custom-order field='Latitude (generated)' />
        <field-sort-custom-order field='Longitude (generated)' />
        <field-sort-custom-order field=':Measure Names' />
        <field-sort-custom-order field='Multiple Values' />
      </field-sort-info>
      <object-graph>
        <objects>
          <object caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' id='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3'>
            <properties context=''>
              <relation connection='textscan.1go7yg714drblk110we6l06pw5cb' name='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' table='[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=';'>
                  <column datatype='integer' name='Year' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='string' name='ISO' ordinal='2' />
                  <column datatype='string' name='Disaster Group' ordinal='3' />
                  <column datatype='string' name='Disaster Subroup' ordinal='4' />
                  <column datatype='string' name='Disaster Type' ordinal='5' />
                  <column datatype='string' name='Disaster Subtype' ordinal='6' />
                  <column datatype='integer' name='Total Events' ordinal='7' />
                  <column datatype='integer' name='Total Affected' ordinal='8' />
                  <column datatype='integer' name='Total Deaths' ordinal='9' />
                  <column datatype='integer' name='Total Damage (USD, original)' ordinal='10' />
                  <column datatype='integer' name='Total Damage (USD, adjusted)' ordinal='11' />
                  <column datatype='string' name='CPI' ordinal='12' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06' name='federated.17elh5p1wnfsis17afxk800qrr8t' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.17elh5p1wnfsis17afxk800qrr8t'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Disaster Type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Total Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Total Deaths]' derivation='Count' name='[cnt:Total Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Disaster Type]' derivation='None' name='[none:Disaster Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;American Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Anguilla&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azores Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canary Is&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cayman Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo (the Democratic Republic of the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cook Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;CÃ´te dâ€™Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czech Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czechoslovakia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominican Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eswatini&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Guiana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gambia (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany Dem Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany Fed Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guadeloupe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guyana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran (Islamic Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea (the Democratic People&apos;s Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea (the Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyzstan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lao People&apos;s Democratic Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macedonia (the former Yugoslav Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Martinique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia (Federated States of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova (the Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montserrat&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands Antilles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niue&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Northern Mariana Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palestine, State of&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;RÃ©union&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russian Federation (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint BarthÃ©lemy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Helena, Ascension and Tristan da Cunha&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Lucia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Martin (French Part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Soviet Union&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sudan (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Taiwan (Province of China)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania, United Republic of&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tokelau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tonga&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turks and Caicos Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tuvalu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom of Great Britain and Northern Ireland (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela (Bolivarian Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Viet Nam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Virgin Island (British)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Virgin Island (U.S.)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Wallis and Futuna&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen Arab Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen P Dem Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yugoslavia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='8' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
        </panes>
        <rows>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk]</rows>
        <cols>([federated.17elh5p1wnfsis17afxk800qrr8t].[:Measure Names] * [federated.17elh5p1wnfsis17afxk800qrr8t].[cnt:Total Deaths:qk])</cols>
      </table>
      <simple-id uuid='{02EE156C-7EC2-411F-81D2-8E333E046ADE}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06' name='federated.17elh5p1wnfsis17afxk800qrr8t' />
          </datasources>
          <datasource-dependencies datasource='federated.17elh5p1wnfsis17afxk800qrr8t'>
            <column caption='disaster probability' datatype='real' name='[Calculation_251075704402124800]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT([Disaster Type]) / TOTAL(COUNT([Disaster Type]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Disaster Type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Total Affected]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Total Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Total Events]' role='measure' type='quantitative' />
            <column caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv' datatype='table' name='[__tableau_internal_object_id__].[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]' role='measure' type='quantitative' />
            <column-instance column='[__tableau_internal_object_id__].[_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Disaster Type]' derivation='None' name='[none:Disaster Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Affected]' derivation='Sum' name='[sum:Total Affected:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Deaths]' derivation='Sum' name='[sum:Total Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Events]' derivation='Sum' name='[sum:Total Events:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_251075704402124800]' derivation='User' name='[usr:Calculation_251075704402124800:qk:4]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_251075704402124800]' derivation='User' name='[usr:Calculation_251075704402124800:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17elh5p1wnfsis17afxk800qrr8t].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17elh5p1wnfsis17afxk800qrr8t].[__tableau_internal_object_id__].[cnt:_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06.csv_98CC4ECE436F49C6ADF67440E35E7DB3:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17elh5p1wnfsis17afxk800qrr8t].[sum:Total Affected:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17elh5p1wnfsis17afxk800qrr8t].[sum:Total Deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17elh5p1wnfsis17afxk800qrr8t].[sum:Total Events:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.17elh5p1wnfsis17afxk800qrr8t].[usr:Calculation_251075704402124800:qk:4]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo (the Democratic Republic of the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czechoslovakia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Martinique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montserrat&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Helena, Ascension and Tristan da Cunha&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.17elh5p1wnfsis17afxk800qrr8t].[:Measure Names]</column>
            <column>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk] / [federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk])</rows>
        <cols>[federated.17elh5p1wnfsis17afxk800qrr8t].[usr:Calculation_251075704402124800:qk]</cols>
      </table>
      <simple-id uuid='{FBE315C1-47DA-4087-8B8A-2910A8521E0A}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='_EmergencyEventsDatabase-CountryProfiles_emdat-country-profiles_2023_04_06' name='federated.17elh5p1wnfsis17afxk800qrr8t' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.17elh5p1wnfsis17afxk800qrr8t'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Disaster Type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Total Deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Total Events]' role='measure' type='quantitative' />
            <column-instance column='[Total Deaths]' derivation='Count' name='[cnt:Total Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Events]' derivation='Count' name='[cnt:Total Events:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Disaster Type]' derivation='None' name='[none:Disaster Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;American Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Anguilla&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azores Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canary Is&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cayman Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo (the Democratic Republic of the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cook Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;CÃ´te dâ€™Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czech Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czechoslovakia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominican Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eswatini&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Guiana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gambia (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany Dem Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany Fed Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guadeloupe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guyana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran (Islamic Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea (the Democratic People&apos;s Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea (the Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyzstan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lao People&apos;s Democratic Republic (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macedonia (the former Yugoslav Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Martinique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia (Federated States of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova (the Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montserrat&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands Antilles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niue&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Northern Mariana Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palestine, State of&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;RÃ©union&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russian Federation (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint BarthÃ©lemy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Helena, Ascension and Tristan da Cunha&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Lucia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Martin (French Part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Soviet Union&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sudan (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Taiwan (Province of China)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania, United Republic of&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tokelau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tonga&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turks and Caicos Islands (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tuvalu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom of Great Britain and Northern Ireland (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States of America (the)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela (Bolivarian Republic of)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Viet Nam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Virgin Island (British)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Virgin Island (U.S.)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Wallis and Futuna&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen Arab Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen P Dem Rep&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yugoslavia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.17elh5p1wnfsis17afxk800qrr8t].[Longitude (generated)]' field-type='quantitative' max='33035938.937530518' min='-9551179.8555979356' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.17elh5p1wnfsis17afxk800qrr8t].[Latitude (generated)]' field-type='quantitative' max='16840077.953744147' min='-5634997.9546376979' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]' />
              <text column='[federated.17elh5p1wnfsis17afxk800qrr8t].[cnt:Total Deaths:qk]' />
              <text column='[federated.17elh5p1wnfsis17afxk800qrr8t].[cnt:Total Events:qk]' />
              <lod column='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk]' />
              <geometry column='[federated.17elh5p1wnfsis17afxk800qrr8t].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.17elh5p1wnfsis17afxk800qrr8t].[Latitude (generated)]</rows>
        <cols>[federated.17elh5p1wnfsis17afxk800qrr8t].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{571E62A4-360A-412E-B0D7-E346BB676384}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[:Measure Names]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Group:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{41EA5414-CB2E-4894-BD76-1A09C1D80E53}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[attr:Country:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:CPI:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{4CA08CC1-7BFA-4EFC-BC51-EF48DE5317C0}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='100'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[:Measure Names]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Country:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Group:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:Disaster Type:nk]</field>
            <field>[federated.17elh5p1wnfsis17afxk800qrr8t].[none:ISO:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A6B7B7CA-AE57-4DAA-90B3-C65CC6D8C254}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d3Qcd3bn+6nUOaGRcyZIAMyZlERKokTF0UgTpLHGHnuSPfZ61/uO3/o8
      +7xn76432F7v2utZzzhIE6QZ5ZE0iqQCxRxBgCBBEJlEzkDnVF31/gC6SZAg2QBBEpzR9xwe
      oruqfvXrqnt/v5uvMDY2phsMBq6H/u7zBHy+Gd+pqoooioiiQCAY5nxvHxarlR07diCKIuFw
      GE3TUBSFWCyWvO7yz5dDlmVEUSQajV53XgmYTCZUVUVV1VnHMxgMRKNR4vE4JpMJQRBmnBOJ
      RIjH4xiNRiRJSvm+v+r4eM8+jAaFu7duBqDh1CmGhoa47957URTlNs/uxiEbDAZsNtt1Twx6
      PYwNDc74zusP0DMwSCymMunzUVBYxPIVK3A4HOi6jqZpSSaRZTl5naIo6Lp+1XuJoojBYEDT
      tLn/oEvuIwgCBoMBk8lEOBxOHrdarcnjAPF4nGg0iizLSQYxGAxXMMmvG+obThEJBdi0/u4k
      jXh9AU6cPsfy5ctZUll5m2d445Cvf8rV4bBZsVsttHSex2AwEPZ7mRgfv+K8eDw+4/P1VnZN
      05IEmypmW/ktFguiKOL3+6+YQyAQQFEUZFkmEolccUySpBnM9OuGrq4uXn3zbUSDGQGdr371
      qwA8vPMBapZVUVxcfJtnuDAQb+TivsFhunr6qCgpYtWyKhSDkbXr1gEkd4DbiWAwiM/nm0H8
      siyj6zqqqhIMBvF6vVcwAHDNHepXHcPDI/zLj34KRjsWMY4/EEguSIIgUFxcjN/vv6lz0DSN
      kydP4vF4kt+1tLRy6PCRBb3PvBnA4/Mz6fWyZe0qCnNzmAiE+OZ3fxer1UowGAQgFd3iZmI2
      Ik6IQ9cicKPR+Gu7+odCIQ4dPYYii/iGLiDLMl9/9lk8Xi8v/PxlxsbHCYVC/OvPXmPP/oPz
      WihSuebgwYO89v6nvPHL9wHo6enhowPHOHiqlfHxiTnf82qY91t22m047RXouk57dw+PPPEU
      JpMJv99PLBYjHo8vOiVJlmVUVZ11xQeQJAmj0YjJZLrFM7u10HWd8fFxXC4XJ+rq6OvrZ+eD
      D2C1WhkeHuHg0ToUqwNrupHhST+f7NlDS/t5BkfHuWerj70Hj6E68ukbmTshfrZ3HwPDIzz9
      pScRxauvv1u2bEGWFSorKznX0spb+xvIrtmOEvBw6OgxHtn5wDWvTxU3vMyNjE+wbMUqiouL
      CYVCSetOLBa7pqXndkAQBEKh0FWPJxjgVxm6rnPmbDMvv/4mpYUF9Hpj+McGyM0vYMPa1YxP
      jCPICrFQAGd+Of7hbg4dPopstmFKy+aH//pjCrc+gWLy4bYIczYUjE1MYrVYr3udJEls3ryJ
      YDDIJ28eInPpNiTFgMmZQWfPKMdP1rNh7ZobNlTMiwE0TUONxwmFw+SXVnDPtu1Eo9FrEtdi
      wGwMabFYkGUZTdN+5c2f4XCY7//z88QMdmKxGB0d7ZjzKslbvpXRCQ+CINDb28uSwiy6+oZQ
      whN84ytPcOzESQLpSzE53HhO7cIwco6qglzu3rptznP40he/MKfzJUnC7/djnl7tBUEASSEQ
      CM753rNhXgyg6zotneeJRKPc9+gT6LqelPvvNOi6TjQaXRT2f13X0XUdURTRNA1N0xZUFzEY
      DJQV5dPS0gpqBMmdix4JsDbXyF1bNtHT00PdyQZ8Pi/f+p3f5sDhI7zx3sdYDQKRaCcTF5p5
      euf9lJaU3JJnpes6vb29aLZMJOXizuwf6WPV3TsWxEw9ZyEqEokSj2tIosjaDZtIS0tDVdXb
      bvGZLyKRCLFYbFHY/HVdJxAIJJ+nqqrE43E0TZtVcUxYs1JVREVR5KkvPsHy2hpUQSEWibC6
      spBtd29laHiYH7/2SzJy8njqi0/w8d6DtHR2Y8wuRY/H+Mq2VTy1fQ0V5eW3bKEIBoP84q23
      UaxOEASiIT/BiWHUSOgKs/Z8MeflxRcI0NJ5HsVkYtPmKe+gLMvJh7JQE7vZkGUZWZaTvoDb
      zQAJ4k/oTkajkVgsRjAYRBAEjEYjZrN5xjwTO8Zcce/2bTQ3n0VUjKxbuwYAm9VGRX4WmRnp
      rF+/nvoz5zApEgZvD3lFxajxOMuWLl2w35sK+vv7kQ0m+lvqQIe+M4eQDSas7mw+3XcALRbh
      qSe/eEN6m+Dz+fRUPMEfv/8eA309pDmd9AwMUlFdywMPPJA8nngRwWDwqlaWxQSr1UooFEIQ
      BJxO522bR8IpKMsyk5OT1zw3LS1twRh1fHwch8OR9ItcPu7IyAi6ruNyuXj+Jy+yYd0a1qxe
      tSD3ThVNZ8/y9qGzOHJKuHDwLdwVq8mp3kgsHKDl45cpXH0PyzNE7t8+d10kgZR3gGgsRmdP
      L5bRMQRRorq6esbxxANcCNPUzYYgCMRiMRRFuaW+Ck3T8Pl86LqOxWJBkqTkyu90Omcw4qUO
      IJhSBhdyl3K73cm/Zxs3MzMz+fc3v/H1G3pO9fX1rF69es7XSZLEQNNhghNDiAYzjrxS4rEI
      nYfeJXvpOhy5ZTSefP+GGCBlarVYzFgtFqpXrOL/+r//A/n5+bOedyeIQAnRwWKx3FJfRTwe
      Jx6PJ0XGxA4EFwMLAbxe74zrDAYDDofjls3zctzoIhGPx/l///wvGBgcvP7Jl6BqyRJ+91u/
      Q02BG9lix5qWjWK2sezBZ8leug5d15CnKfh6zs2rIeUdYGTCw85HH6empuaqq7yqqnOK4Px1
      gyRJyShXVVVnrLyJ+CNJkrBarei6TiQSScr/t1tHuRGsXbsWg8GAeY4ORkEQqK2tJTc3F8/r
      rxMYH8SeVQhMPYtowEdBfh7dPT387JU3eHTnDlYsr53TPVLeAaw2KxUVFbMSf8JicSeZQm9H
      rE+CmGHqmSV2hARxJxYPg8GA0WjEarVis9kWnUd9rhAEgRUrVuByueZ1fXp6Ojvuv5/JnnbC
      vgn0aYtjNOjFaDaz/9gppJwlvPLaazSdPTunsVNmALc7fVbzVyAQYHJyEq/XO2tE5mKEoijY
      bLZbvqoKgnCFXT8UCiWZMRwOEwgEkp8XWu6/k1FeXs59K0tI87Qx2rQfNRLCnlXAZ3v30z0W
      QBAE7KWr2HPw+JykkJStQD96/nnWb9hAbW1tUoYOh8NJM92d9KJsNtttCdRLON0CgQAwReCX
      i0KSJKEoChaL5ZbP705BX/8An+w7QNDvJysjnT4xC13XcWQXEZwcwTnZyrPPfDWlsVLWAQqL
      iigrK0PTNAKBANFo9Nc6ZHi+UBQFURTRdR2z2ZzUmzRNw2QyYTabiUQis5omP8cU8vNy+a1n
      voKu67z0+luYszMxWOwAGG0uwmOpj5WyCLRt2zYsFguRSCS5xSRW/jvpRV0qhtxqBk48J6PR
      iNFovEKfSuxKCd3gc1wboVCIAU8ISTYQ9k3gH+1nqHEfS0oK+OkLLzI8PHzdMVJmgIQilpBL
      70TiB277nAVBSKZcRqNRgsFgUhFOPNtEANjnFrVr42R9A6rBjjjQiHnoNKXiKN/60k7WrVlN
      b28Px0/UXXeMOYdCJOTTO8niczlup+iWYL5IJEIoFEJRlGQcVeKYoihJj3rCNPo5roTDYafK
      PcljD+1EkqbWck3TEEWRf/9Hf5SSUzZlJfhyJBRguBgLdCeEQCQIKhaL4XQ6b9uOkAhwSwS/
      ybKcdHYlFOVEmMadtsumgkQEcaJAwY0iHInw9nsf0n6+l+2b1rBx4wbkFBaOecctmEwm7HY7
      VqsVq9V6x6QQJnKVbyfxJ5AgfmCG1UeSJJxO5690ZQpVVTl67Nisx3Rdn3NuyTvvfci4rZS8
      LV9k79lefvSjHzMyOnrd6+bFALquE4vFkt5Kv99/x4hECaddIvLydolDCVkfpkSeS8WchC5g
      Nptvy9xuBRRF4b577531WF1dHa+89sasxxpPn+bChQszvjt6vI5BwY0lLZtowIO3v4uS4mKa
      mpquO4957wChUAi/35+MWb+TTKKCIKCq6k2vbHC9OVgsFkwm06zh2Ld7d0oVfX39/NX/+j4f
      7PpowcYcHR3lqVkyxyYmJvjpCz/jUlLz+/0cOd2KPa8CQRCIxyKYXJk09oxjtV0/fmpecosg
      CFitVqLRKLFY7I7xAMNUGHRCD7jdSTyXWn7uRFzo7ubNA2fI2folGs8eo6K9ncqKihsed+fO
      nVd8p+s6ra2t2K0Wjh8/htVqITMzcyqI0GhFmFZ4bRn5WNPzGOs8TV19A8fqTyOiEQyFePrJ
      xykoKJgx7rwF90QCeUKkuBSJlL7FClEUEQQh+f/txJ2YhB8IBOjt6+f19z7CXXMXCAJGYmRn
      ZS3I+Fd7JwaDkW3btyHLMiaTiRd//jKaKKMbZuZJCIBvuBdnSTnmnCWAgBzw8v7uj3n84Z3k
      5uYmz71hzfXS0oeJxPKEhzORbriYkKhcYTAY7vggs1sFVVXp6OjgRGMzwVAYfziC6C4ib9MX
      kBQDEz2tZFuFmxay7ff76e7uYe++fWiijG9ynEAgyMnGM5RvewpXZj6QkIsEEASKNzwIgoAg
      TO0MsslMx6ifH/7TP/Mf/+LPk2PfEAOIoojdbkdV1WQtzwQnGgyGZNnBxVQtQtM0otHor7SF
      ZSGhaRqHDh3inQ8/Imf53bjKVuGSZCRZITg5QqS3ic3LK1hR++icxg0Gg7z55ltUVJSzcePG
      a5770xdepK2rm8K19zHR00ooHOdYxzDl9zyJyTZ7hKkozSRtSTZQtG4Hw417GZ+YwJ2WBizA
      DpAoZJv4+/JjJpMJURSTAWCLBeFwGEVRPmeC62Dvvv0cv+Ch+vHfRZSndkzfcA++vjaWZFl5
      8CuPYrNev87P5RBFEbc7bUZm2qWIRCIcPnKEto5ORsIi5Xd/EVtmPmZXFmZnOoIogCBx8bbX
      v79vqJtwNMb58+cXjgGuh0SF5sXGAAnL1ecMMDt0Xaeu7iQHznRRvOkRAOJqjLHmIxQ7BJ55
      6gEyMjLmPX4gEMDrD1A5S4XppuZzvPfJfoz5SzGXbqHE5pp+TzrW9OxZRrv8HeqzHnPmVzDZ
      0zrDQXbLvFdGo3HReIoTu1YsFvu1rwI9G+LxOB9++CGnuobJqJyqGqFGgoyd2c9XH95OcVHh
      Dd9jYGAA32X9Jnp7e/nk0z0MxUxkrnsYSb5UR7uamV1I4Zyp7xWzFXtaBlmXKOu35M0nbN6J
      ePjFAIPBkAxL/hwzoes6bR2d2Es3Yk2fspj0ndrPPbXFC0L8ANXV1ZSVlSU/d3d387Of/5yw
      0U3J5nsvI/5rzjbl48Otddy7poqcnJzkd7eshEOCCRZD1Yh4PJ5MRPk80OxKhMNhgtE4oiQT
      DfnoPPQeeWaNu7ZuveGxjx07RjgcRhTFZPhHb28vf/+//4GhcS+5tZvnQPypIR6L0t94EOPE
      edauXjnj2C2lxkSVs9uJRDZbIBC47XNZrKivbyBuzcSanstkTxuKf4AvPfnEgiwW6ekZSdN4
      IpSmvr6BuKoSj0WI+K5WG0m45N9s388ONRpm7NTHVLpExmMKf/N3359x/JYKv4lKbLfTN5BI
      OTQYDJ+v/rMgGAyy78hxrMUrCXlGmexp5Te//OV5J7RfjvLyi2LPoUOHOXnyJJs2bWLt2rWM
      e/0o05ldM3EtOf/qIpCu64y01mOI+JiY0JDUAFVV5TPOueXa3+2yuoiimBR9gF/pQLMbwb/8
      6CcI7iLSS5bhG+6lMN1G1ZIlC34fTdNwuZxULqnk6PHj5BcW0+eLY7zCIJGgl9R1NV3TiPg9
      hL2jiGOdTGBmdMSPVQ8zOjrG4OAgQ0PD6Oi/HgwgSRImkylZceFz0+fVUZCXR5sHEETGLzTz
      1LZrO6kuxcjIKAcOHOCxxx5NetkHBwd5/vnn+b3f+72kzf/wkaMcPt1OXDKgyyYcFXcxohjI
      Xb9mllHn0YEGnaFzJ8izaJQsqeREcyfFGx8CoOvIB/zk7Y+x5FWiRoK3ngFma0p3sxGLxdA0
      bUYg3Oe4EufPX+BUew85y+9i8OwxSl0Ky5alVhBX13V+8eabBNMqeOOtd3jmK08xODhIX38/
      99+/g9HRUdxuN6FQiNbWVtwr7rvCW7tQCHvG8Qx0Yc1047EWUnr3U0iKYarWaVEVzrxSTPYp
      R9gtVYITAWi3OgAsUYPT7/cnd4DPd4GZCIfDfLx3P4UbHsLsSMc/0M7OB+5PebHo6++nZ3CE
      3oa9THg8jIyM0NnZyd59+8nOzsLpdDI8PMxf/vXfkp6ejnew+6b8Dl3XGW6po3DNvThWPYS7
      uApJmYpUEASB7Ko1SeKHOTDAQtnvVVWdUQzqViARoKfr+uer/1WgqiqemITBYiMej1FbVTHD
      YXQ9HD5WR+76h6h++BuIpZv46atvsWXLFlRdpKW1jVA4ynu7P2FJaTHoGvHY3Nrgpg6d7GXr
      ceWXY7DYEMVrv++UGeDYVdLX5orbEYSWsPlbLJbPV/6roKenZ9osLBDxe6iuLE35Wl3XiWnC
      VPFakxWjzYU4veoaLDZCkSg/ffEFOgcnGVGNDI9PkhEbZbD5+IL/DkEQp2OFUiPtlBmgr6eb
      w4cO3XDyS4IAbzUhLrZYpMWEoaEhXnn3YxzlU03n9LiaDCNOBcFgkLau7mSwnK6pGLQIH+89
      QEA3cOzoUSLSVPJ75vK7CWfVoEgCGboX30jfbfXGp/wrJzxeXnrpJf7rf/kvNDY2zvuGiZY+
      t3InSDi/Fkss0mKDrusgiIQmR4mFg5gcbo7UNaR8/bmWVqx5FSQsNp6+TuKqytkJEUt6HhaL
      heKND1G6+WEEQcSWkceQkkOPJ8qFo7uJR2/fe0mZAcymKcU1zW7lk10f0NbWNq8bJgrTmkym
      W6YMJ/r+3okVrAOBAJ2dnUxMTDAwMHBTcitycnLYsXkVnft/wWjnGRSzDU9MZGLi+n2AW9va
      +bTxPJmViRADHV2NoJhMiLKCbDRjT8ugc+8bDJ2rQ5uueOcqKMdkd2G0OZJK6u2A9Kd/+qd/
      kUqh2KjPi1ESCIXDnO/tZ3R4GKPJRGZm5pziexLxN4ldQNf1m1oGMHEfURSTzfDuhEbYmqZx
      +sxpXvz5i3yy5xNOn27k0IkDtLW3UVpcuuD6TE5ODj6fn/OdHWRVrkI02+ltO8vSipJrvt8f
      /eh57JUbMJgv1pYyOTIYP9+MEPHjLFuFnJaPJSMXT38n9pyiaZOkxmRPG2o4iLt4Wcoy+0Ij
      ZQYYGehDQicQChOJRhkdG8M7Psq5cy2sWr16Ti9D13W8Xm8yg+xmdmlMELyiKOi6fsvbIs0H
      uq7zl//tP3PoyCGCug/RIuAP+JGzpyomnBmoxzcQZEnlkgV7bpIkUVNdTTToo/dsHV0NB7nQ
      2UpFWSmqqnK14ml2u53Gsy04coovzh8ddaIfmxgjbs3AaHdhtLlw5VcgGYzTZmgRR04J0VAA
      szN9wQPgUsWcPRGFudkMDI+wde0qugcGOX3mDCeOH2f9hg0pjxGPxzGZTMmOiDfTO2uxWFBV
      FUVRsNvti9YKFA6H2b17F/6An4HBQQYHh1CcEhl32fA0h3GtMqG4JKKjKopTo6HjONt82xb0
      N4miyKOPPMwj00ppX18fnZ1d/OztXfzGEw+xtOrKkIhIJIJsnFnKXYtFyXJaCUZiyKaLld/E
      y8IcBFEktzp1T/PNwJwZQBRFqivLGJv00NM/SElBHp9+8jGr16xJObEk0VXeYDBgs9luqoUm
      IfOHw+EZ5QcXG86ePcvuPbvQ4yBZROwVRkxZMga3RNpKMyNnvQRaAhgiJvCJ3LNxOx/u2o1i
      MPLIQw8uqD6VYKiCggIEUeRIUztvfXqYvBN1lJUUU1ZaSl7eVJ6APxBAMswUKQVR4vSpBqy5
      5RQZrj2v270ezVnwEgQBp92O027DbDLSPzSMx+ubU5GpRC2cRCFTuPkFaw0Gw4LVoVxo7D+w
      nzfefB0kAdkukrXNhnu9BWeNGckoEp1UmdDGieQF8Kd50HSd400ttI5FOXDoMIcOHZqXhWvP
      3n18/Mmn1zwnKzOTR+7ZQDzoweeqpGFC5sUPD/Lmux8QDAbRNZ2RtnpCkzPLEAqCgNlomC5F
      eSM63s3lkJR1gP7ubkLBiyu1yTilWPYODqPIMsUlJWRnz5avOctNp2sKJRLmE5aNmyWeJIh/
      MSTjXIr+/n5+9JMfcezkUWKmMPYKE5JJYKzDh9GmYEyb2lEjozEmYx5QdKRJmfzseyjf+iSu
      /HIQJZrPnePs+UEa6k9SmJ+DLQVGb2lp4eP6DoYjInLEQ35+HgBtbW3EYrGkzK+qKs899xyV
      5WUEZCeOnGKsWUWM+CIc/uwjqipKcZkN9I1OYsuc6hyqayrW0DC6Fmes7zyxgXOEVR2za/45
      xFNYePpIWQQ639ePTRaSRCQIAoo8pVhu3rp11uTmqyERE6RpWrJK8s0g/oQCbDKZFp3sHwgE
      +MEPf8D45Bh6XCd9qQVzucjYUR1dMDHUNEFo1IoW1/AFA5Choetg0bLJq7kraTrMqFhBVtUa
      BFFCU2P8/L29PP3Q3eTmZCd/cywW48iRI6xYsWKqW6PZPNWeyTtCsdvM6lUr8Xg8vPPBbk43
      NfH73/4djhw9iizL7DpwEjmzDK8/QFyaCl8QBAFHbgn27CIOXmhnidVItjRByDM25YWVZCKS
      mcfu3cLLv9xFxJ6B1H2KccBdfCPd5hdeSkh5B9i3fz89vb24Xc5kPI3dasFkNHDw8FH8gQAF
      BQUpx9nruo7P5yMcDi94cFqicliiw+JiI/5oNMrefZ9xuun0lBAqwWhnFyd2jzPuEanadj+x
      SR8Taj9+kx/VHJ1aqnSwhHLIK92EMB3jIkoyQqLSnSRhyijgxLEjRLyj5ObkJEvXt7S18dI7
      H3Gs8RzZaXaWVFZyz+YNlBTk8fH+I/zik0P44goRzwiROLT5DXQOe8lZvhVnfgViRglmV8YM
      T74gipidGQxO+PGND2Mvqpmei4gqGjl37DMsFevJKF/O2GAfgbEh0oqqFtX7SJkBTjU00N7V
      hSIruF0XO5q7HHZkSeJEfQN1dXVUVFSklD2kaRqhUCjpGb5RJjAajZjN5uT/i5HwE9i1axeh
      cBhZkpmYHMeYaaV/MMw93/0mhEYxZJeTXlhIbNBH2DqGMP16BAGicS/aaBxXVsWstnNBFDGn
      59PVM8CFc41UlJWgKApmk4nWQS9Zy+/i5ME9LCsvpuHUKd779CCRrGoySmuwpGVhcucQM6fj
      zCvFmp6TvEeCyWaDYnUi2dMxmC+KXmMdp1lamEHv4Aj27GIme9pw5pVgSctaVO8lZaF448aN
      bNq0GY//SotNWVEBK5YuwWo28txzzzEwMHDd8cLhcNIEeqMKsCzLWCyWZLnDxfSAZ8O6devY
      +eBOfH4vskvAUliFJb8QnelNXpgiOFk2X7Hra84Y/ZMHiYWvbnQQRBF3WS2T9lJeevU1YCpc
      WTBYiXWdYEV5IQ0Np9h1qAFb9d0YbU4EUUQxW3Hllydl+VQhShJmR/rFOWpxxIiXjPR0DOap
      FEdbZj7DrfVEA545jX2zkTID1C5fztNPP01eYSHhyywOoihSVlRARVEhHo+H//E3f8O77757
      TcK+tIzijTLAfHYPTQ1y+INXaRu79YFYmZmZ1DfUMzQ+iCFNxuB0kZ9nZs8LLzHst2IzJ/Qs
      BUG97BWpkGFZgcFsJxr04RvunfX5CYKALSOPyahANBpFFCW0eAyX1cwDO+6jqa2Loo07kQ0L
      kxqq6zr6tD430d3Khuoy2vtGSSutQRAEMsqXs+S+r2CwLLQZWic4dp76w0eIaxAYPMPuF3/A
      Zx/tQU3B+DQns0hjYyNRvw/TJTbnmKoyPukhHtdw2GysW16Nrmvs++wz9u/ff9WxEl0SE//m
      i0SYcyqIRCLJaNbJoT4yTBHOjerJgrm3Cm1tbfxiz6sUPOVCtlgRFZn06k3s+M3fYNOOdUjT
      vGzNyUcMzoxnF0IS7owqBFFEUgz0Nx5kuPkoEd/kFYygaSoWkwlVVVmxvJbIcBeTtmL+09/9
      MxFbDrLBvGC7pX+0n6b3f8xwy0nUnlOoiIzELTOSUWSD6SaEPMSZGPMTj0yi6eDt72LJg99m
      +wP3IqeQ+pGyFaitrY3D+/dSlp874/toNMq+43UU5+WSk5WJyWRk48rl1J1pRrzJokii9mgq
      SS6BQIAXf/o81dVL2bh5GwZnLmYpjnd0gF+eeB+HzYAtrYStd919U82luq7z8ssvozhFIiMq
      CMWIV9HBYl4vunIZUVvijA6dJrNsFZJipHDd/YTP7cc5KdDe6sOSWYTFlYEOqEMdrF9Wxj+9
      +Do2iwldsWBJy6Ty3i8v+O+yuDIwp2Uy1HICkwinh2Okl9Us+H2uhEz+klomRvoBCAcDnPrw
      OQbK1rBhy3ok8do0mDIDjAwPYzebriCOgeFRbFYbOYXFnGk8xcplVQwMj2Cx2Vi3fv1Vx7vR
      VquiKOJwOFIm1k8/+YiJoWYu6M2Mjk3S2X4al6+epvgpvrohQIZD58OT3WzZetec5zIXDA4O
      4g1PYq8x4Gu14VpeMOt50YlJtIiKGJCIO9SkCVyQYDx8jljQj9HmxOxMRy1dixrq5esP343f
      H6D+9FRroNLSQg619OOs3Yau66S759BBeo6QFCNlWx5FjYRRp0Oqbz00XOV38cjGDA6/8wrR
      2FrMxgXKCIvGonT3D1xRTMox7RFeu3YtBpOZCY+XvqERNm3adM2oS0mSkqUJUy1QlQhlcDgc
      2O32lIl/bHSUY8eOICoOfAGN5sa9rHafYmBiAHPgGLIlQlYabCzvYdf7b6Y05nxx/PhxDEUC
      5lwF0WBGnK6eMN7eyOE33mDEA6o/wNiRE9S60vn6pm/iCqbPUIYlzYiuX2ytanZm4PX6KCgo
      oLp6Gc8+/WXuvXsLR9sGSKvagGwwoRjN2LNmZ7aFgiCIKCbLlLn0ljkdI5z56CfQDmsAACAA
      SURBVBU6W86y96M96OEh9r3+Aq7yjRgN159DyjuAEZ21tdVXrNaZ7jTGJz0cPXqUJ598ktde
      fZXlK1bM2ubmUiR6C0xOXim7zoZEXu98Ctm609N59uu/TdOZRtqbPmXHmihLi7JYt25mzmtZ
      js7+z5p55PE53yIlNDY2cratCew6kQkNY/rFVTKtfDlLYyEimk50aIh/973fp6ysjNOnT9G5
      q4lecRRXdQlFS2wIknJFDH0kGuPP/uzPyMorYNXyWtavW4t3qAf30k0358csGhipfeBpai/5
      Zkfp2pSvTpmazrZ3Egv6KS3IR5IuMoEgCJQXF9LU1sHevZP83ve+l3K2V2IXSCUfIB6Pz7uj
      iyAIjI2NoGlxCrKgJOdKhotrcLxFYvt912bc+ULTNOob6hmXhsjeYGf0UAxb+UUGFAQhKebY
      jAays7OJqTH2132AN8/I8g3VdB3rA2xEBQ+RgBdlOtJSMVkYHBnn0cce41jHCHsbO2hovUAk
      FELXNITPCwFcFSnvU+UVFZzvH6Srt/eKY4osU1NZztjIMM3NzTN6MF0LgiCkvKLfqLVi69a7
      2bb9PnyxXIIR0FWVE3V9HGqaJBiFg+eyMOU+yqrV627oPrPBO3yBjz/dQ2f0HI4qE9GJOIhx
      1EsCCCe72+g43UpX4xlCoRhxLU59Yz0nJ4+hG6bFnelz484IE4OtM3bOgrX3sedYI/mmKA6b
      Fdfye6l66DcRFx3xL7xhJBoY43xbO5oOEU8vjft3c7axiXgKknXKO8D27dtZsWIFf/VX/51Q
      OEJNZTnBUJiu3j4Kc3Nw2GzYLGY+/eQT7r///pRX61RrhS5EP6+RkWEyc8s52W3C7D9GTDZR
      f3CIzuj9PP2Fr+B2uxfciRaJePhP//EvGfSOk7uyAIvDSLAnE1NWAYrjYh1Mk9NNwcrNqENj
      bF++mSNHjvBOyy+IZ0iIZ8dp3jWCtXQqYA1dQJJnhhnbswow2tPo7mjEkV+MKN8uh2Aq9foX
      Eir9HW309A6SX1bBRGcdMUsVOdnulEKtU2YAXddxu938wR/8G3783L8SjkSwWsyEIxEO1NWz
      rLwUg6IQn0PF5USwWiqtVheilmd1dS3V1bV4vV5O1q1BHT6LpcTE1579NmmGhV8p4/E4uz/e
      R8QoE00Hc74BXdUx55QgW2f6LhSjlbTAAM8++yzvvv8urePnCFVMgCBSdFc5qqohT89Rt2i0
      Df4CmzsPR2ZRcgyD2UpWzZTMf/u84TpXX+UFFp4pZEpWbMLv2w2Ad2SYrv5hjKb7yMzKvMZc
      EleniJaWFkRRpKKigi88+RSvv/IKBbnZrFxaRXNnF+f7BolGozzzta/NSVEVRRGz2XzNfAKL
      xbIgBa0SROF0OllbVcjHUTN/9PRWlJtALH6/n1defYWT9XXYyhXsiglXjRlfR4R4KDSDATRV
      xXOkjj/6ve+Rn5+PR58gVDZxielTRJEuSquCAPGMEOPnm2cwwKW/8fZBmOXvW+Vt1yna8jTl
      JgMHfvkK4fJizKZr02LKlNraco7OtlaWLV/Jfffdh/L1rzM+NkbDiWNkudOIxTVKy8oJzKP7
      eiJ+52rWoJvRwqir9Qzn6ju40NbIE898i7LMa2cuJeaWCoFFo1FeeuklTjU34FotcqG1hf5h
      PzHZzJLiDILDExgzLsbOREbHWLNiJfn5UzE4dqv9uqKyccxFzqqr+1kWF24mI0Q489FbNLe0
      MuAVqS6QOHO6BWvecgwp7OopU1aO24W5ooyWptPEVZVHHp1qi1lZWUl7RwchrYlzLS2s37Bh
      zqtQovO8z+e7ZSvYynu/zMp7b87Yg4ODNLY0YC024KyxsmbdRhJ1jwM90SusMvFwhGU1q5Kf
      l5eu5HTPCRB1QGOkaZDRUY1l26bs+NKYkYr8JzFeUuNy8WA2Eehm7gDTZtAHLn6Tvzz1F5uy
      FcgwvUpXlhTR0dbGgf37CQQCZOfkcNddd/Gtb3+b6urqlGrJzAZZlpOOsUsjRBdLIdu5zGPS
      M4loEDC4JTxNM+ugWvIUImNdM86PebwsuaQG/6Rn8hIaEkiryMLmEEEHwStR5n6crLK5VeK4
      tdAv+7d4MWd3nSRJVBbl0VRfx//827/l9OnThMNhJEli69at8y45IopismDWpR7khK/gToLX
      40WL6WgRHUu+Qmjcz8SQD1XViXnjyLaZqaOy1YrP7ycajRKNRukd6EFQhWRstGyQEVQBwS+R
      4VtOfuXWaeK/3Qxwu+9/45iXcC1LEhnuNOzuDBoaGnA4HJSUlLB//340TaO2tnZeq5OiKMn6
      PaIoEgwGkWV5Ea90s6OsrIx4SCc8FMOxVKD1YDfhaAQ5K5fatdmI8kyGtpUV83evvcyqzBwG
      BwcI+cJYOzMIZXsR7XFCzT7082msqNqGYIPhtnoyK1YhLYBp+MZweT/exb3az4Z5a5eCMKUY
      /tZv/RYAY2NjDPR0EwgEicViN1R8ShAEjEbjHdvDNy0tDUkUsZUbke0m8pem0XpyEGlAwHMm
      hilrZsKJIIpYSgrpbe/mi489RigUIhgM0nyuGZfLzmC8l9hSiVBURTBaiasxtHhsETDApbjz
      iB9uoEGGQVFoPttMR0cHMKX46VqcrIw0du3adeMTm25mvVjFn2vFL0mSREZ6JmpwyidiyXCR
      YXcw2ekhPKQgWS4vJBVjov40RXl5lJeXU1tbi9liITMzl3eOdPPZgI1DfUba+jzgKiC/djOK
      KbUciM9xbcx7eY1EY9gsJj79aDfR6HZee/klVlVXYTIYOdlQz4oVKyguLr7+QHcQEpGrCeK/
      2u6kKArLViyjmTrweTn8xlmkPifr7nuGQLRnhhUo5vHia27lgXUb2LhhA7quo6oquz89QHt7
      O35bDXHJgqDHMMa92LMLbn81qV8hzHt5ddptrFteQ6bDxge/fIuNK5djs1gQRYFwOMw777wz
      b4vQYkQ8HicWixEIBK77uwRB4OEdD5PrKyXW6+a3dn6H119+lWcfXIPg8aFfEvwnGgwUZ2bx
      wI4dHD58mFgshizLjI4M8dTjD1Ek9eHU+tGRCEku9PiN9Wf4HDNxwwK2zWphxdKLJjxRFFlT
      s4y9x07Q399PWtpitFXPD7quJ1tFhcNhTCbTVXcBu93Ob3/tm3g9Xux2O0cOH6bpbBPpaWlE
      LxGftFgMRZL5YNcuzra0sHPnTi6c72Jprg+TSWFTtZPqzNO8VTfEpKTctirKv6q4KU/TajFT
      VljAqVOnbsbwtwWJYl4JH0UwGLxuGLdBMeBwOPjR88/z2quvYjKaWLGkiujoePIcPR5nYnwc
      n9fL4w8/jCzLNBx9i8c2eAn0vk2etY3cdJ3v3D/GuqIxYkHfzf6pv1a4actJIBRiZGQk5Wyv
      xYihjjqe++v/h0+7IDzez8v/+l9588B54GLH+evB5/PR0d6OIkJ3dzcF+fkYPVPdKqOTHsJ9
      gywpL+fLX/oS1cuWTV3j9fL+YYGAP0DfcITWHgFJgqXZHl79u/9Mz6D/trYV+lVCyoWxBnt7
      CAZSi/MRBAGb1Urn+QuIokhJSckdZ8sHsLnzqE4L0SVVUZZlYkWlm65hIyW51hlWqmv9ttHR
      UU4ePzrVvTymcrKuDo/Xg8HloCIu8NCWu1i/spJP3nkTclcTOn+Qv/77n3G0rpvBYDYer5Hm
      8xKjkzoffDiBXbfgnxjCqIWx5hTO47kKl/y7/PPlx651/czPsVAAXdOm+4RdbczFRwM3zcju
      sFlZWlbCnj178Hi9rFmzhqKioutfuNig6+z9+H266OGrO5chydnJytZer5e0tLRrEqHTLOEJ
      RFBEiIU8+AMhqmuX4wxEcOfmUVVVhW+kB5shRu+kiiNkYkl1Lb0tZ3BYjUiCgK4L1J8cZWgw
      Dbc4gX3SiOFcO+qyNTdoDr0eoV9/lwlOjhCaGCbcegiz2UJMtpC54bFkw7yr33Nx7GA31cvk
      djpYVVXB2EAvP/jHw3z7O9+lvLz8Zt5yQTHQUc/udz7lw/db+dJDW3njzV2cGXFTkPNFKvPS
      UFWVSCRyjeK7URrrGxgfGaC2sIiO0X5GfEGsVjvlBYVs3LSJ3t5eTnx2EN+5Rnr6XsbTexZ7
      ViaR/gqM4lRgWSyuszp9A+NKmN7+AEZZQRbiBMcGceaX3cInMvUbg+NDhCaHUQfbcageiiwK
      pdUFGBWZrqEx6us+oXjjQ8mrghPDRP0eXIWVV4x18xnh2ox8UxkgEdpgNBoYn/Rwsq6OnJyc
      O6Zfb+uFUQ61edlcXchwfz/OpUv5xpe3YpDjGI1GVFUlEAhgMBiuyFeY8hlIOLMLWFXi4pGc
      fDpdLj5saaZmcpKDn35C+9lz1LrzeSCvinBslA+iWdy9KY+9hz9h28MPcby1jlHPJFlyOg5L
      JmlWieLMPARRAUHnzNG9GHekYXJcbmm7WlbW/J+5Go3Qs+811KCXqmwnpTYjGYVWLMaCGe/S
      bjHhHjlP29vfB0c2NoeLzFA//VETzoKKS869dTkC18ItiTMwGgwsKSmmr7+Xn/z4x3znu99d
      kBTHmw2jxYbZasVunIqE9Xo8LKuuRpblZFcbXdcJh8Mzmm/4fD7+6Yf/xPjACKUmEe+Qipaj
      88WCPDL841S70yiym+i3ZbO5pIrz7cf5ZUMfKB4oeID1NZuoKCrBMzlMjpqFU77Yn0uWp/Q1
      TdfJjCoMHvuEkh2XFrq6nMgTK+BciX8m44iSTDwa4QurSrCbr17uJttlJ8tpY8IfpKVvhCKr
      RH5RAXnD4zSd3kfmim2XzfP2ikK3LNDGajFTmJvDkMd/R6z+ADU1tUiKQlzTkUSSle6i0eiM
      jizRaDTZ9EMQBPbt3cfA+T6KTOkMtNYR8QWo60wnamznvXPnOdAb4PGNNUmHbknFev5txSXJ
      Lc4pgi9Oz6Kh78Ksc4vrGj2il4KV9xELB6d1gWulIt4YIr4JciwigVD0mgwAU0YQt93K5qUX
      F4XizDRGLwwQ9IxhcqZfejYXGfTWM8MtjTQTBLBaFya98VbgZz/5F1rqj5KxZAOrCk00d/fz
      D//wfR74yrfJs1zMEYjH40QiEYxGI8FgkNb6ZnIM6USI8s3t2ym4JPZnQ+1U1QlfTOVw/wU2
      lV+9fGDn0ACartEfGcEgyHR3NNLtVVlfsxmDIUI85kVvfYWQ4kCvfQaDZfZOjtdDcGIIEDBY
      HcjJfl8zCXKi7SRrs5zkuOdX3FYQBKqyHezvqMO4ascsDr25EX/IO07HiY8orN6EM2f+ITe3
      hAG8fj8DwyNMeP34gyEefyJw1babiwlr1m+hq/Ewhfd9ga+vtrJv1MGjGyrx+XzEYkLSKZZI
      7vd4PLz3zrv0jfSTLjupcUnkXSWZ3ySJuESdQCSMRRE4evIIRdXbYLSRd+qa0ASJsDOLsopz
      rFsao/28n086Ymy+qwSPrxuzzc8f3BfCbvazu95P30AX6WVzD0MfbT+F3nkUi1FhQtWI2vPI
      XbuDeCxGXI3hG7xAZsUKZJuLtsEestNsGOYZoWs3G8mK9jHUVofRno4jrwxNVRFTqWJ7CTRN
      o/HwO/Q4DPQ2foTjpEDlso1kltZe/+LLsGAMEE8EiU0zsihOrY7haJTe4XF2PvI4b73+Kooi
      3zFOnPUbNlJr+ToHLNsxOHsY2vUa/32Xl3ue+X1W5l2srKxGw3y2bx+fnfyQknAxD1Vtp98/
      jlnrR9fi+FQNu9FAPK7iDUcYjKocHxwkNOnjU+kQ+VYDguqh3Qt3FVTz2zlLOXF0N8qS1XQO
      teN2xFhdEMBtHWR8uIuS1WV8YY0LUZjaVbcsi/DBsdcZEyCtcAmCJCMIV/dP6LqOFosy2lZP
      vq+VVavKkuv9wJiHgx/+K2m5Rbij4zhFaN/XAoJIXBW50VdXU5hFuK2BUI9OX4sVpx4kVrqJ
      tMuIV9ch7Jug6/QBII7V7KRwxd2Iskw04CWgx4grFjxuJx5AaTuJK7cUQZQJTgxjcWUgGWa3
      zk0x3RTpLwgDBMNhLgwMo+k6w8PDqGqcwvw8LBYzzjQ3X376aT7bswdJFCkqKmZ8fHzKWbbI
      d4HAxCAtHT2cN51jyRKdZavupnzwBJ7AVKzP2PgYFrPIGz//MW8crWPL7+Rz+NCnvPH2JCbL
      Cp5dm8X+pkaOjUb4D/dt5GTLad7rHqGhd4T/UVyAARhuPMERkxFN8LEk7z4EwYqCh+54OiWB
      bkpzp2omSU4XK0q9LCk20hlWuaRIBE4rPLxBZe/pt+i/4CRuK8NetAJbRv6shbGC4wOMHf0l
      4WCAR+9ZmdRtBCA33ckXHFYkUUSRp+oQVUaiaLqO2eBAusFYJLNB4a6ai6ZbTdM50n0Oj6xg
      Ts+d7lcgMNBRT1PbMbzpbjRJxOg5z8THPVicGWQVLUVJVL2anvsFm0xg948RDSa8koYxqlJb
      uZHcJWuS99J1GO06w/muRhwWJzZbGoLP59NTIcSGIwcZHRq84vsJj5euvgG23Xc/qqpy9uxZ
      us93UVBUzDPPPIPT6WRkZIQf/p/vU5Cdxfm+fnyBIOvWreU3nv36DT3Mm43xvjZONnWhyUZW
      rlzBQNsZ/HI6m9dVIwH/+x//nrAaJKb5aBN6WXFvCQB9HzfjHS2m2irxoCWTpo4uvrpmJboO
      /WOD/M2BBv7IasEvCJh0HRlo8Pezt2wrj9RU0dl8DG9GFcvyz3HPqqnGdOg6Y0MemvqjrKrO
      wGG6OiH2jQp0DRup922icO0DVxzvPvIu96SrKLKMy3r7GwhqmsbB9kFG/SHUtGJGgxMMqD4C
      aZe02tJ1pFgMQdORYzGiZhPa5aJYYntKlL8Z91CquHAXVhLyjDPuG6E3OkkgzYUcjbJyYvzG
      doCR8Qn6RsbR4nHaz5yaankaDPKt73yXE8ePJ+OAdu/aRV5WJgW52WS4XURjMU6cPsPQ0FDK
      rVVvB9z5lezIv+i8yU6/m4HBfl565QWCmh9VVYlVeTBYVKSzCYJUGY7oLP+ymVhY42en+wn7
      w3wVgZHRbk6NxPnjnffxVl09Nl1H0aHZO0Tr+ARB/x72xi4wNO4hXYtStPZiHFUsLhCSXNyz
      husiP0NHksKcVWfXP2R0DLKMy7Yw3WFuFKIosjw/jZPtfpTABU7KJqL2y/rMCQLx6ZAd1XSV
      EjaXMbLHZedMLIww0IguQNysoNumfCZyNEZttnv+DBAMhWntukBlSREuh536s+eIxVSW1dRS
      XFxMYWEhMJUpdqGrk5VLl6DG4+g6mI0mfH4fDQ317Nz50HXutLhw7tw5Tg+exL3GglAmYDLG
      OfHTk5zv86MpRkqsfuy1pciygG6N03HyDEKbnx+arcjD7XQLZn7Z0cG/N8rITIkdI+5crMU5
      hIUYbucYq5YN0zEs8uKeQvLT4xRmaOxrcVKSm06GaYityzykO68+x2AEmnuMs8rruq4jOzLp
      Hm3DbjHesEizUDjWcoENVcVYjQaird2c7p+kJzfnxpJ/RBHVODuzZE16kO2Z82MATdNo67qA
      1WJmdGISt9PJ6uqlHG9sIm+6uNOhQ4ewWq3k5ORQVlGJbrLSOzDA2bNnATAZjbSca7njGGD7
      tnsxmyx8uv8TIgWTOKpNrP/tu7hoxc8mUfEzMiJQ7SincGmMC1oUa1YJLjVGVSyOOTzlRxiS
      RNR0D7mZQ6RZfBjkOOGYQl+0jAvSelonVKSxKKpoJjTUx2889BiNXa+zfWWEuAaiCIkmKLo+
      Rfxv7DcybtlE4dqNV8xfEATSK1fTe8GMt72RrZW5eIJhNE3HqMhYjLeupmggHOVUVz+VeRlM
      BEK4rFM70v3VpWwKR/lJUxcdmZk35d4D2Zm8Oh6YHwPouo7DbqOgrIKh4WGGRkfJy84iLyuT
      V195hc6ODhSDQsDnJy8/n6efeSb5UN94/XUyMjOpq6tj3fqFr8R8syEIAps2bSInJ4dXd72E
      6vOjOK5UNOMRjcAhP8/0+/CJEhMCiK4sqosrGWpr4sT4KJok02mUyHD3kmWfRNcFAhETXaO5
      9FENgC7IqNLUaxqNu+nvH6B/wIxJUWnvV9hSEyYvHXxB6BhyMRnNpm9ygvSCrKQCHI/46Gk7
      hymznJxsN5JiJKNiJS2tdbh7RxhVZVRNI+j3cf/SAszGW+Olb+kbxmU1Mezxs2Vp6YxjFqPC
      GqeFnmCIqGXhRbWYwYBg0efHAJIkocbj5OTmElNVRnqnvLtpTgcZaS4aGhqS8v/Q8DAPPPhg
      skrEl7485bbfunXrAv2U24OSkhIe2PAQrxx+gcyt1itWTUEAocjAPn8++QUVrLc5qMkrwW4y
      c8LqYPfZI2Q4LRSnD5HuKOfkuSxCMQuyIZ0WnxvVeGWUp45IW/MxlhUGULKfZE2Zg30H3iXT
      Os6Z8wLf+8M/xO8PMBA+hjWvDEEQgTgt+98j4iwhS71Yhds/2o8myohZxXz7C1+YLhhcx2B3
      M4WZacjTZiZ/OIIiSRiVhXUZqfE4/nCE2uJcDFfxA6hxDf1mpKzoOoZQmLtj4dQZYHBkjAvd
      vaDrBENhMvPyyczMxO1280JDA0OjY4x7vEiiyOqapYxPTBJUNb57lbifxV/uJMqnb7/ByUH4
      49/9Gmf2/oK39zWSt/oRfuexDQAUFRUhvq9z9CeHCahxCrbUIvV1cb7LT+6mWorTrNRUr2Zz
      ydRqLgoCg55xRq0C/pgf3edFNoBvUsYzMkHUlsOaigoa3v+UPkUnv3Rm5GxcVOgMZBLrtfMn
      X7sbWZa50NVGuf0Quek6P/jH7xPFSPm9X8FonfbYqj76B0Zg1IfVPRWOrsVVQl0n+Y0ndmK1
      Wtm3by+djXUImkZzdz8rSvLIctk41dXPhDeAxWRga3UZufP0Al+O463dTARC2M3GazaxUwSB
      vP5BPDYrYZuNsHX+od9yJIpz0kNElqgxSFRYjdSUF6duBo1EIoyOjiY/J6o6WywWRFHkxRd+
      iqRGiQkS6zZsZPny5cBiqFY8X+joOrz77rts3bqan/98L8/+5qO8+Ytf8LVnvoau67S3t/Pm
      2Z9jKdXoOHYBV5WLwaYYtVuzObWvk+VbKogfEFldspqB3n4eW7YWWZR4t/MUX3z2aZ57/jk0
      fwv3Fjsoi3bz37qLydRUnEW1dJ3ew5GJPFx5lUi6SoHSjShomExu/uTffQ+bzYp3fJjhcR9t
      nR2sXb4MTVBwuDNpbT7D0bYh5OxyJIPE2b27cS1ZTeuJo9z/5NMEJ0cwDTby1aeeIBaL8fpL
      L1LpVDAbDUiigNmg8N7xs4xNeAGdscFevNhZUZHHg2uXokyLVrIoIklzX6GPtnazqjRvauUX
      hKtGKl3qMI2qKvubutgnKQSc17AAXAW5w8N8Z1kxdotpKjVnmi7ntAxfSsxWqxWbzZas27N+
      w0bONTfz2OOPY7yK5n1nQUAQoLetnh8OHudU00k6Xz5Gy4F2hiP96LpOyBdGqY7Tur+LnLUV
      uNxx2t/uRlVkAp06sWKRu+/aweb1Wzh9+jQNJ86yvWolDxbX8M6rb/Cd73yXl3/2HK81nOMb
      +XGGfXHAjzjpJd1lZ0dmP1uWjqPrUFuqM+aF+sES7PapBeuFf/570ktWsfKuezh16GNGglEC
      pkK++9UHyM8f4cc/+CFaRCdNinNhfy/lm58kHotgcWXS0+RFVVWcTifbdjzIiV1vU1ucgzzD
      cSag6/EpPSQWxesP8tah04iigKbpFGamsaW6JMkQMEW0Hs8E/SNeIpIBt82Ew2JCjWvIkojF
      aMAoS3gCIbJcdq6FS+nNqCjcVV3K+TNdtIXCIAroCOiiiCaJU9aAq0AJhiiarsZ3eeveeesA
      JtPMlqk1NTXU1NyKvrC3CgHe/vHP2HOkkVCBzOoHMmg8cJbCR5diqJ6qDCGHBXytPrqbRuht
      ncBdXEYuIlLIze9/48+pyrdTWFDEB7s/4OM9u8m3Z1OQlkl5Zi4lRicN9fXsfOQpXur7X/x/
      73cxnOvGbNdpPnoMU3SYP/njYiocU6ugpkFDh8Kqe+6Znl+IQBDKs/JxWy2kbd1BdLybs+NT
      rzQrM5Pv/OG/4dOXXyb3wCHGTSYGDr3CpM2B/YFncOaVMzY+gcPhoLCwiN5lqzl26hi5aQ4K
      pm2sGjqaIFCS52Tigh9RENBUlYR3or1viKJMF6U5U9GdOtA1OMJPdr2LaE77/7l7zyi5rvNM
      9znnVM7VFTrnbnRAaIRugEQgSESSEHMSqWDRpETLlke2Z8Zr3TXjuWui76yxfZ1kWTlQVKJI
      MQdEggCRQzfQ6Jxjdaqc64T7o5GaCARI0KLu+6+7du0Tan97f/H9yKvLx++1oEwrqCYNYuAW
      LRCGpgvdbm4CJoOeu8v8FI1OoQKKMC8A4azMkN5AzOW86DY1xRPkhyPo0Khx2bhzcRWGq9gx
      N6UCBYPzbAYX2pX+/2Onvz4OHjzIWy+9hsVmRK7I4mi5+jOrskZ8IEOjbhWPPfD4gt3rX7//
      L8TSMZ778tdpb23DNZ2iypPPieFeTk0P8+gT95PMwtu79jKV1dOiZUHSIzmPUpAHhR6NNz6Q
      kCNxatd9nm33fA5Q2Pf2m+x84Z+QLTaKpRQznha+/o1vUFJwKbj4zptvMvPiS7RkMpg0OGQy
      0lNeja1uFZHOI/zX//pfEEWRwcFBXnn+22ys0jEYtdE3FSebjvGF1Q4cQpq/enkMl69ggbqi
      ahq+PCf3NDegqirHe0fpCXdyYnQSR76Fus0NeP2X6s1TE1myrQorPCXUFftumXqcyclMBiN0
      zEYIJNJookSL30mVz40oCpj0umsyDN6wAGSzWSKRCE6n8yJj8++vfn/jmJyc5Ld/+wIm0cjE
      qgksDVca9EpWJdmqcUftZtav3bDA6B8bG+NH3/0eRR4fX/nG1xFFkbZTpzn9/iG21y4np8js
      6j/LHfdu4+SZs4xlLbgC/YiyjMWoo2NihKyWxk2EWuMcXUkPsmSiVDdNTIV3BAAAIABJREFU
      Z1svZiHI6sU2Tp4IEzdbmLBWs6GpCTWXIa2KWAKtRAUZ0VTE22fmEDWNyqIanl1Zj8dgoLWg
      kAceeQRJknj1p//IfeVhggmFkyNpvDaRpiKNn7zUyoysIThLiCpW0C4tpoyiYjEZybNbGJ0N
      k1OCdPbHWLHNzVAmy5ot1eRiCokDGerd+SyrKEQvSZ/K2tE07WKLLukG1+dNqUAul+szXcl1
      gU36kxDzXo5sMsq+ve9hlcwEE7PMJeZQYx5s9oXvID2o8vBtT1JbU8ux48cw6PW0tKwmkwhy
      fOeLuA0+CswOJoY7eWfvCR578ikcbhdHPjhKo9mDqGq88fIriFYLsr2YfLubIpudt9uPY/f6
      UFSFeCDGrGAi35BgqW2IOmsIaZsIeAHYeH/B+buZQWM3MB+w7IwkGVEk8vLsHN+2BS04QUvO
      zgq3E0kQ2N3eTltVFSubm4mncszGFfx2HdsbL22KzzxxyWX93QNBhmbVi4vLKIlks1kGp1IY
      HUZUJQ+nfZLW4xEKquuwHtCjpHRsXboI27VSGG4CmiIzOT2DYLJT4LIioDE9F8bldmGQxA/Z
      MB+NGzbhdTrdZ76Qpburm3A4DEAoFLpu37GPRpajBw/w0ou/xS6ZGE0OEYlEOPFO14JRSkal
      UqsnLy+P9nPt7N67C7tj3l2oyArNiyuYiISZzcQJjg4xEYmSzShUVVVxz6MPcnRqkHgyiF6L
      UbpyG5nu9zlxaB+vvHeQ8Wgcq82K2+VCECTu9w/wREEPjbYQ0nU2twsEJJIosqTIiACUGyM0
      jAyR7h6iV1L5Vf8QewPTWKuqWNXSgiAI1DStpW08c+2JgSeandTkSwuaIWY1KCkqxJVnx+m2
      snhtM82rV7LGVcTGRdVsWXFrFj/AxFAnR7vHOPzBUQJZiM6O8d2X32E6kv1Y892wAIii+Jll
      ar6A5SuW4/f7mZyc5B//8R95+623P8FsBjZs24HPZSShZHGb80hMRHEWfqgAXYN4Kk5XVxcO
      h4N/9yffpL6uHgCL00ex34WtoZmNW5oZSblZUZPP+Pg4fX19vPXWWyQzaRy+fB7cshJvaR23
      37UdX3UNXnGWWFojODdHfkEBEdlAWP74iyjfmMKfmWNRWk9jOETx2ARHpme4a+ulbNHVa24j
      KBWQzqmcGklxYiCJrGhMjgc4NRIBwGHKIU50Eh8/y0QwxtRYHydPniapGVhTuwynlEe1tYoV
      eUuIRHL0B+Zuaf2HqszT0YjpAK0jMdp6A6xaUvmxw2U3TIz1UdA0DVWR0RCvcDX9W+HCsWy1
      Wlm9ejVLli5hbm6OPbv3UFdf97HmHD3zHnLGTsyYwrPexsTADKX18x3elaxK8EiSP/vyf6Cm
      uoa8vLwF7VwVWUae7SfkacYSPMuBY6c5/P4e3jvYRlFOJRyYRnRYefTJJzElRwkY68gTI/zs
      +R+Q1dzoHCbkTIryigqmp6fxCCFKjPHzvRng+7snOTSaQWfVcag1xK7+JAlJotKpQwCyssJP
      DkZonREZVOyEUiYeNDhYKivkqSrWbJazmkp5VdVFapcThw/S2R4g3RpEG4ixayzBse4AsknP
      0mIHIFJXXcTaUiP9yRwdAxEaGxso9rmYmAlxIiBi0eI4bRayskI4Fqcq/9b1X3a4fVSX5KOL
      B5nNJjl4qpfJ8WHSBg8NpZ6brn6+ZeHYRHCEN1/4EeqqZ3hyXemtmvZjQRTFiywNPp+P4pJi
      FEW5SRVu3g16vGMY0aDgNEXpfjMAXvd83y8ZbFkXT9/9ZURRpKP9LIM97Qi5BNlMGp3Jxuix
      1znVPsCw4mXZvX+AWxDYuGk7K1dvoPP0SdSkxLa7t6MjS//YFJOOEaoKbdz/5DOMvf8q45Yy
      6qp87Nu7lzyPh3dmqwjnDNzhGqcj6SFqiPF4kwmHUeI9wUlFqZudAwqiowJB0wgqHtzLvaxQ
      Veocds6GwsTGAxTk5hmma3Iyvp17eLt/AMuyZWiKTLBvgnsDISznd+3aSZmAqucXbRGq/Xm0
      lJuZGhvj747kmLZXMp6IE+iNcLTvLIXVVYz3nEapXMTA8BCDQ90Y3ZUsKc+nyO24JUKQiMzw
      1v4ThEU3z9y3ivvXNNN6to3C0vKPdQrcsBfohjBxgtcni7lvVeGtme8zhh++8D0Ghvt5/L6n
      yKQzlJaWMjo8xODJXRTM7CXfkMRrmC9giSt63PoMsirwrdh9lN79x0TO7eeJHZvwer3odDqm
      p6fx+XxMD5zhUFs/mt7CqmX19Jw7QygtMDc9zsY77iAQCJDvz+fNN96grqEOYfocen81mazG
      q7/+Ed6SKtbdtpZfvPBLvHo3/2f7ejKqilOvZ2dgmo1+L2ZJQtU0vneylZZwDO9lOrwMzEoi
      kgZ2TcX0YY0ll+KNcIrc0gqe2mTkz/71DKq3khnHamKjp9HZPCRiGUqXNKMPtlLujJKUDUx7
      jYxNSSz2Gvmc147faWd0NkxDqR+z4XfVyX4hPusJOZ8ZZDIZbHNJNosO2t/bjybnOE2aRfH3
      ucM0hdWxkLc/T5w3JvWihs7uRdTpyehsTE/PUFAw77Hx++dVqfzqJh6qbrr43fLyCjRNY+/u
      Pbz68m/RGw3keTzctXkTq1atQhQfhNQkP3rhXTKSi95ZhZZ4GKsss2VxHRadDgsgqyqhbAaj
      eCkKuqKijKn2TrzZSwKgAwqUq5MYK2qaF/sHGFA0JkaLGPvAzZTnNrKCBYMo4a9dRXRuhoKa
      OkRAFURA5Zk7k/zkeIIxwc+M18Mr4QimuRhBi5XV7QM8sPLjqaS3GrdMACJTXfzyez/nRNSF
      3/511iz6dPK4f1c4eeIEldkMzT4vaVVFRM8P+kdY5JnGqrt60wpN09jZlSW1ZjGp8CzRjt28
      2F+Au6yWUtdHc+usv2MD1TXVWG02rFYrlstbK5kL2LFjM5LFyLq1t2ORNF4700++95INcjwY
      otBkumiTqZrGsfFJtuVuvMmGJJr4fP1izhoMPO9rokf0Yi0VsV42xlU4n9KQDQ8y3XYYc02a
      sWAJZ49PMpUaRjSvg/J5d613Zo4VZZ+dKsBbJgAOfx3P/uf/w7Pwe9XEQVXVi/SGV4tsp1Mp
      9r72Gs6hQVZ6540583lbwiwZkDV4/egsEzojz62y8+rhGQZSAovKbaz3i4wmDYR0JRQrCU73
      h/jG09swKmmSSXXhgr4MmUyGXC6H2WymorLyqmNAwF9YypeenK+12LNnD/mSRLXFzGA8wf7p
      Gdb5PNRcpt4KwG2F+QRngxRdY8e/FuKigCrqQbjGb6tpOM0m7rm/li9sUQnGBIpvb8Tm9VzM
      09EnUyxFpsTj/Bjqj8ZgTzv7zwxy57b78SZ6+eGedkwWF49uWsahk4dQLMt54Pabsz9vmRdI
      EOZbI4nizQcjfpdIJBK8+cab1NTUXDWA9osf/pC7kjHqHPYF3q25TAa7Xs9QfI5NZWlmkgq1
      HgNtYymWV9lYXmTEZdFRo0+xawLyCi0MnRnlzMHdBHv6iXSeZWJujsKyMuRMjLHpGE67hcHe
      Xk789mW633uPQCyGyWrFZDZf04C/QMz14vM/JxeLMpdJcnh6BKfBzPK8PCyXpZ0LgoDHZOK0
      opBNpXAq6g17TYKiRKu9DEUQmek6SGCoB73FykzXB0wPdxALR1lfHubp7VmMegGjHvK0FEPj
      kLLaQBCwJJJYY3Hqi3wfY40IuD35OEkgOArp6exh+71b8AtzxAwlrF3qZXJCo7Lk5lK2b6kN
      IH1KIe5PEzabjSc+/8RV7zsYDOIOh/D4PAv+3xuLcjBwinJjgEpTfMEiaqmwMBLJ8lIgyzPN
      DhySxmJ5F9FhD2Umlf9y2zLeGID73C5GhgbZ+9ZvCYXixPUu/vCph2jfu5d7dRJSvp+xoQFO
      tLYy5fTi9OXRuLiR8opyVEXhxLGTTAWmWHvHWvr7+kkGI9h0GWZTafLMDhx6A+9Nz+DQ6Vnr
      9WA5X3RilCQeqK3mx7KMf3zqorfno+BWVUy5OXJSAbai5bjUWebiMqVNm9BF2snGQ2xeBqbz
      e4heB5U+GV3PpS46sl5PbUHeLSmu0TifRi0IN0sqtwC3jhgrGeRXP/kJMykHX/7Tr+DT//6c
      AtcS2q6uLioNC9MeNE3jg+kx1jv7KDAmAYWXPwjxwYyMziAgz2YYz6jobEZmgyleOp1gTksT
      yvRwuzXDr1on2bF6NYIgUGaxoJucpSed4f3hdrpW1OPUVCRhfiMptVhIKSqK6qQglcfYgT5a
      9x1HEiSKzflUSn6OvnKARCqBrKo4dCoGUWORM4+NBYWIwHgyxc7AFOu8Hnzno7GiIGA1mZgR
      RfJVhaHpCQZkPVsKvBiu8S4KZZnbo0Ps1fvQaRHm5lJ4ysup1nWhU0/w5a9VUmRd+N2+GR1h
      q+NihmbWaGRvOEyiY5A11SVIkoDphlNrNHo72th1pA0KVR5aZOdnL7+NyWDmnvUxXt15iDN9
      Gp7iO1lWkneDc95CN+jgmX10BPPYsKoam836OwuGfVLkcrmL+U7nzp5F3r2TJQ47p4NBZjNZ
      ktlJ6s2tFwNSoJHMqKiAJIno0cgoYNQL6MQLxie8OruKL1SvQ7rGe3nldCv1NdVUWCyYLlMP
      9s/MgacJr3U+An0hqioIAlklx2hogjJ3MS+eep1SaYqgbGRdYTkb/H4EYZ6+MZPLsn86SK3N
      QpFRz3Q6ywvjY8RyKmYtgXp8gJW6DGmbn9scV6+/DQkCP3QXMGorY7hjiMKaWmxCnLsLWhEc
      aR66feGiO9Un8P3OQkI+30JmB03DMRfkYbufWCZGTYkLr8OKKM5z0wVG+9lzqpfFK2+jzqXy
      zvsnqFjSzPKyPNKZDPFUFovJiNlkIJvJIOr06ERIZ3JozFPyX6vE8mq4ZSdALh2l/XgHQ8df
      o37HH7O50fPRX/oM4N2d79Lc3IxBP8/x/+Of/pjnvvocA319dL/5Bjs8bl4abscvncMlyqxw
      RLBIlzfHE7AYFxaRfLjaUxTALgYZiMeptX+4CCTNS+8f4f3xAFHRRn1TzYJPC01GziVCFwXg
      8tNKQGBwbhSfzYPHZEJRfXytthLPZcZ8Oh3hrcOHSBWuRBBC/PfXDpCTRNIVhfzJF/6QpQUy
      f/2/dtEYbufd+LW9Q25NY11ijnjNDCnTADntOBWVJSz1Keg+lB4SScCbvU7CHs+VtCaCgCGW
      YEvLKkx6PQd7z3J0YoTGcj9Oq56EbOaRe+7klT3HiBhUmtauo+3ocULJagZDEYRMhu3LatHr
      5mtSLsBi/ngaxy0TgPzSBooLErh1Ior8+8H9CTA+Ps7wyDDBcJDGugbKykr51299C20qwJ2e
      PPriCdxCJ6sc05/oOqqmkrlqV0kTj9xxJ49c85saqnZ1j41e0tFYUMu+nkN4bEY+n1+I40Mq
      hdns4pHmJt6YkdhSmM90aRl5TgtRs5/Z020o97fgaljCvmOdGA3XXw4tmSyHzxhoeLCBxRVX
      /sZTQTjYqaN7zkiXp5j45DDBsQhFLStQwmOMn+zEVFqHVG7gqb/7H5T5S/jy1vtYbnNytKcT
      Sa9gkBQOvnuQuL2cvslRts5FGI3FOJRRUUuKMUej7OscIt9qYlNT7c3xGmkas1PjjMU0GqtK
      MEjCrRMAZ0EN2+7UMZ0UqK/9/dj9AR579DGsViuzszO48/IIh8LoRD1qTQ3Dqoosy0wccrLE
      Novtqv5+lT2nI0zpDTy12Mw7p8L0xlVWLXKytvDSYtSLCuqnsC/k270UFhWy44n7+eBXv+Se
      6+nUcgbBYCPPoielCGw0mzj8QQ8rSjK0Wx4lPxNkqK0Vm6rRatRTqCg0ZuWLRr4ELMnm2NNm
      uEIAUmn4+Uk7p/XFKB4dqk5C7/RhDsfRVI3IwCSFGzcSaT9DKmQmuHwdJr/Ad4eOYlHh8bIG
      VDlD26kjDOqcNDetJpuM8/5olHNxFafDjl6WcSXTSHoDOcnI2GyYcv+N6/uaGmPX0R6K8wyc
      kkzcVnUTxFgp4LrsLIKIv7QK/w3fzmcD9vMqid+fj6ZpGAwGGurrOXumdX6AplBRXs7hhIfK
      5DmqzZEPneoCty+ysX88C/J83syza8y81JG8KACqBmnNRY3j6jWwmqahatrHYmmTRAlLzkAq
      maJm8xY6dr1Lo+tS0Xg8McML+w5xIiFh1zUzOzvOREikrMqN12SkOhQlurKZL24sw+f1sevt
      txkIBJicm2V8aprquRCG82s9JgqcrDRzx3L1IuvchdYWRgPUOlO0xlVUSQIEDHY7wnndXtEZ
      MBoMSCY9ChbiPUfo6JUoXrcOs0XHP4RHsEXDTEyPY59J8O7AGLZVlQx1nsPcsBxJAvdsmE2l
      JXhcTgZGx5FvMpahxSbxVq1gfVmKdwbiwE0IgBlAU5ienESy5uFxfpLuhJ9NpNNpFEVhanoK
      59huyvxm8p1GDA0WBKz8zT4jnYkRtuYNYbpoBwhYDOcXrt7AWn+G549HmFYuLWZRgEL9FGdD
      QZo93g8ZwjK7Tp2kNarxl3fd9rHuu9ZbwaH3DvLIU4/x7rFjVMjZi/5/m9XHcw88xnPnx24s
      X9ips8Rs5ttvvU5dUxMPPv4ENaUuTvWPEkynuHtjM3/9zlGWFHmxZ3PIcg5rIYxFDfSeAkmE
      6dk4D6xNY7dAc43MsX3j9JqrQYBsNEo2FicVTWASM8wOj5IOpTG7vfiblpGeHCCbyGK26slZ
      zIQsZlxONysHpqnASls8QUFNAxM+O7KmUSor+D15xBJJcskYVbU13BQMJlLRCImUdlHdu2EB
      mJubIzp4krdOj5OLZ/jSN/4Iz2e3OOymoSgK6fR8Ils2McPbJ3rx6zXu+1wz1TYdmgZxwc2r
      cgM9U2d5xN1KuSmGIKicGUnRE8hS7TUg6CRq3BJ5+oVR5QZbkD1zhwlnG9lcUIXu/G6vaBLb
      Vq0h09b2se/dqDdimdHR291DbUsL7Xt2s8phu6bH6XLY9TrWGnUcHRrnt++8wemjbbRNzrDS
      F6FvWKbltma+/uwfIggCyWSSVCqFx+O5mF3b1dnBS6/8E34fHBszk1Ck870GVNLTk6A3kZia
      xd+4lGB3H3lLlmKxCcx19KBzl+PwWRfcjyoIeEQzTZKHBtwciE8wk05jyuZYVDifQxVPJDDq
      BILxJB679SpPdXUI5hIsyZ28eFjP1k3rURT1xiPBbW1tnO4c4OHHv0i1bpQBoYYy1++Pr/96
      0DSNZDKJoiikUin2v/NrNtR6ub9C42DYQoNHjyDAe0MC4xQTkMroiHuQlCSlxgizMZkCpw6T
      UcImQU6nY0OlGd1l608naLj1aT5IeTiXMWBUZUZTafYEU8ylEqRjMeoLCq64t7lslmmseG3X
      13UtBjOzRGi5bQ1hk4nZ3l78N0BakMslGejvYWAuR6+aJWYUiUyNsr58nHzLICePncTuzKes
      og69Xn8xfeNCcZTH68XiKuPt0wEG7HkkbHZUvR4QMeZ5sRcWYvO5ESQ9Fn8+BpMeQdRjyS/A
      7LJd4STKJEIEzrRTYSxAFdO8MdmBXtSx1GykoXo+LcRoMJDIqswGgxR7nIiCgKyoyIpCKJGk
      Z2IWvSRekXEqCCKewlJWL6lBlXOcHZ688RPAYrHQ291D2+lTlKky+ptsa/NZhizLZLPzJXXt
      Z89QmBlCEkvJyip63SVVRkcOAQ1NkJgy1vKrjJfOwCmeLGq9mAYNej5M+DEWSPIvp3XYtv4R
      1dvuRhAk3pvoI9J1mk0lDby153X2dZwgiYGnljcs+K4GzMSDGKSRj3yOsYkAdqedVc3NvHvw
      IA2aRiYd5Y3DH0BJM4/Wunl+104CWVi1dA2by70YDFa2LK4nNZ5lqdHIaDzKG3IOgyRjMuRw
      W8OMn/1HugtqqatvuOKagiCwbOkynjNb+J/f/Q7hkkLEnIwhmSLtvD7vz5WQSY/PkSv28tu+
      k5R4zeTicQyhJItXX+KFN+j1VJQUcax1hnA8STyd5Vj3CPkOD3kWByuKl/LqmQPc01K3gLNI
      VlT2n+1DlQwsXrqUZRuW37gALFmyhPRdzbzw8q8oqW7mTzf+ngmAKhOOpXE5Fwb90uk0v3jh
      eQQ5iSAIxKJR7ijysf/YKd6VjfzJ45e6mZjE3Hwp1vlNJa1zc0zbxEggny/nHWSpbe6Ky05l
      zOwyrKXk3ipSix7FYD7PSFa5lEQ0TEoWeOyeP+CRu/+AqdgM3x/tptmuo9FhxyCKWESJLJ1I
      rnY0VaGjbZy4w8ua6ittsHKXxis/eJ1XXqonG1TYsm4FJpODh1ct4+1ZAU1Loxh9PNbo5lxy
      Ye2vAFTYRQ4cOUcmGudobxy/HGJ0TmYg6mDzF688nS5HWUkJd69bz4tD/Vjngog5maiaIjga
      xLe4HjJR5voGcdYuwWhKMvzuEVSLg6KWZoznffj6lMym4iLmhgap//x9rKivwLzrDeIZA5ar
      1BTX19Sw71w3iWQMv32AAvt9NBZWUe4pYPOiZl46fBSX04FFkEnIoDcZqVveQsvq1dhdHuwW
      440LwBtvvYXF5OTxRx+msrKK8OQEOp/vqiwR6ckOvvXzt5FTCZZu/yL3tvxbdjO/OoZO7uI/
      /+IUP/u7/7Tg/6IoYtbDZv80PtsFofawrGrDFXN4TCpkPuTLFAQC5kZ+GVaJyidZbJ3FqZs/
      TQYyeey1PUreXY8g9O4lxeXHsYCndjm9x/fjs3rQSyIl7kIKnfkMBUdpHR9gpV1PWpEp8Wus
      X6qSTWfJB/qEDOuXXiWdWpE5ekzHU89+gyPvvsyJaIo1TsslW0CVsAgp3htIUlg8v5tnMiF+
      uu8wnUkFk2E992/ciD7Qg9k7h9ngJS/cSP2qr+B1f7gZ90KYTCaefOABPLt3YzaZ+Ombr5PL
      CIhk0FRQkikko4ScVjCkJtDX3EZRzaUTQlBVnMkEywq9VDz831hRM89BpE8P8MIbnYSjMdzO
      S4lumUyWcDSGqEVoLGzDZYkxGXmRwdkSHl35h5wODPPlZ55lZHiY1199hT989qs0ljp5/tV9
      /Ob57+JYdj9fuWfljdsAJpOJ8ZFhOg+/RU/rIMJUhPdOHMVfkI/DsTADT2f3sXbt7Vi0BP7y
      eryO6+e+f9rIxQPsa53GZ4fmlSsWfCZJEgMDQ+TlxnFZrn+qzSUVToT9aMKHxgkCEcnHmWwV
      8WQaTVU5mihnsPFPsDduIjrRTceJg0xGRYqKCtCfz5NKx4IIY4OU5xVfnEoUBPIsLnzOEroS
      GXpyHWxuyWEygKTT4TGq9EUFavOv8k41lWNnYzSu2kYilaZkw2Y6j71PX18fRyZD5Dv1tI+E
      KHDoCSpGmgrc5NBTXlbBkspyRnLTnIy3Y7D34LBkSGX15FU9zZat99xwkmN1VRV+n4/X9u8n
      V1xEOjiDyZOPwW5DTQYRjG4kOUrgTAfxqTksBQUYVJklmRxf2LCayYFhznW20zGRxDR3jtf2
      tTIbzRJNxqgsnj+FcrkcXd2DLHIW4LP6mYiM47XNYTJkGA2WkczpaLl7E3qDgd6Th6jwOkij
      o2ZJM03LFpOOhmleuwGHSbrxEyAZj3P86GGyaZnFRWZi6STJuTl++fwLVNbWMD48xorVK9mw
      YQODg4OU+qwMhvXcX3jzRKa3Ggff+CVnBmCs7yzNG3ewqmZhtGLx0mXMHTpGxUfE7+xGEUHN
      gXiVDUMQyepdHM2toT85zdK7n8JsdyMIAka7h4rVD4BkQHeZTaGpKkbx6j+BQaenzF1MPCzg
      vFFHhyjRUpLhH/73X7Hqnue4t6qMsapa8nLwRJkOj93DF9bamEkr5LtcvDY2TsaiRwai2Swm
      0ylcaoDRoAhCHpFkA+nkEBVNYRpLr38CXA6dTke538/MNT5XdC4qt1YS7z1NJhDhdr+N//jV
      57Db7dx+++YFYxdvuI9EIsH3v/89EsnUxaYs5U4fG2uXMRUNcW7CRHtnhqSpFJvWxS/fHWU0
      F6ewYQ1Tk1M4PR42rZ3nNkoERwkK+dzhmtdcblgAFtXVsX5ZKUd6QpweHeUv/9t/YqvRSDqd
      ZmpqCo/Hw5Il860uE4k4P3nrZRo3PYn+d1wbo2ka/sY7+dPNxfzmN79hcdmV3hRJp0NAQ1Y0
      RgaHefPkGHdtW89ibZw/f3GA6iI7j29ZPj9Wy3G1hIYLSOm9qEoYk+PSdcyuAsyuK3VogXnv
      zY0iGY/xq9dHCKtgM1WxYdFCe0ZDwF1VS1POid8QRycKrN6+g/cCP0aKxeidm0EnihhFka7Q
      LGWNZZjPd4TJ5GTeP9vD1MwEo3E/lcu+QpmnnEWN1by+cw+NX3r0hu9Tr9dTVVTAnnffIBxO
      Eo1o+Pwi0/2ToAtT1LyI2cMHsBg8PL2ujkfuvediQPJqsFqtrF27jvaTxzAaDRgMekLRGLKi
      YNIZMGsl5Bn9UP0YcmgXm9bs5dSRnax+4A94aFMzoigyPj5OIpFg8swplq598KIyesMCoNPp
      MJjdbL7vLtLd7zEcs1Lo0mM2m3G73dTX118c29DQwKH3DxIePQcNN0+CeiuhKArRRIqR48fx
      5uVh0F0pkceOHqWvM8XOrjR3NxTyQFOWaUUjOJdgRXMtd5Y7cOk13GYRC0myuK5ypfPQVJy+
      jyYF0FQVeWqMIufVywPnaf6UBZw6Fpudp7+87JpzZnJwrMvLpmWLOTrQz4EDB1i1ahWTkg6L
      VUdLXTmCIJDK5HBrKhbTpZNMVhQ0w2JWbH0E13SShx/9Amo2yfGD+2lYseojn+fDKC8oJr9h
      Gc7Lot+26vkNUlAUGptWsbGwmKefePyG5guHw4xOTjEbjuJwuUirWQ70neWuuuU8t/VLMH6I
      N3MmjI5iBEFBkCKceecXND/7VYxGI7FYjN27d/O1r31twbw3lQu0bvN2Dhw6zmggRON1VEJJ
      0rF9x720nj59M9N/KtDpdDQ1NdHd1cVAMomqqgsIvubm5hjo6yN3Oj3kAAAgAElEQVSWmm/s
      /atTSRqkNCcHcxSIfvZ1zvLTPWM0LVmGzawnwyVvhKDJGOXQPBeSksVAGqNeR1HDhWNcYaz9
      MP0TaTZuXs/Zfb9lLBAmpti4a00ji+Jp3J6rJ49k5CztM4dYXn/j9bsTs1Ds8SErCvk2I2++
      9ipNTU2UV1djmBu6qMdf3gIpns4QCMWYTck89PkvUpqfx+v7jgIqx97fg7NuHQ2lN55vcwFN
      TU0UHj7EoKpdamJ2HoWzIR5fu46tW7bc1HyKolBfX08qleL5n/yYDcX1V4zbULuKf351P4vq
      T5EnR9m/dx9377iX8vJynB/qKxCZ6rs5AYgGp5iemSGoL2dp4fXDwKWlpRw+fIhoNHqFkfxv
      DVmWsVgsbNq8+YrONBPj44SDIWC+aXNsbpIf9o0y5y7GX5BHWFPIKXracouxG/Rw/rENchCT
      NknCZ8OSSLGi8Q7MLh86gxG92UYqMovR5sBRWIdt7jRIJpZueZLG+CDHT0xjGxuhqnz5Ne+5
      f26AbbdP4Dt/2KiKzJmzM5TWF+Ixqpw4NkrK4WJDw6UfdTIIe97fzxvhKfSOMspK3Pzypz+i
      +fb1dPaepdgzP5mmacRSGSaDUXAXsui21awrLMTtFnj+H75DbzBKRqcn3dFNoK2HQ5Ureebh
      u27qnbtdLh7bcAd/f+zwFT2+9OkMWzZvvsY3rw6/38/dd883VMxms9hsdgLREEuLK5kaP8d3
      3zhAd3Q3Y0uXMB7JUO9cj8voZ3ZoFJjntXW5Fp7cOqPzJslxC6vZtNWH1eHmWg4TVU7ywc63
      8a24h1xihhd/9B0iqoGHn/4mFdfRHD4daHQceZedR7p55OlvEh/ez/e/fxRFsvH0154j3ybR
      uHgx5YsW0d5+FjTQ2fNYvNTFlC6frLMSozMJkhG96fzK1zSs8TamAsPo1q5F0mcYOnmW1FSK
      HV/5M0RRJHzgh5TEWxk11pPKW0xkrIfYdCOh4Q4mes5g8RURi/QT8lXgtixsBq2eV3mGQr1s
      vUwtDoyEiIZjDEYLSc1MMCpYsPSM0VHkoNE5v8Pm0irP1k/h0SK80nGUR/wuWucmefu1WUw6
      AUVV6Z2YZTKlUlFVQ83tLTQuXnzxZNA0jUe/9vWLLHFsvtIVfDOoqajA8/5+Js2mi3UBmpKh
      49xp3j7SzT23139kTbIsy/zzP/8zzz77LBcKt/R6PUaTiWMjPcRSSeoKSqlZ0sR/8NgwiiLJ
      ch9GUaTf4ECRZWKx2FVtDKvrJpLhNE1D0puYmOzlt9/+Ljvu2U5+vp+ysvnkqmQyicFgYKq/
      E6cxy/4zoyx26Qks2s4zG35XHDACjbfdjZLLoWhQvvQO/qK+hQ/27iSbU5lP8AWdJGJ2+jHa
      3UyNjYEOHCTJZCeRtBQpXSE55t2ORnmWqBAhUWDDqEjkOtowr1rHdPdR9v74b6iuKGNzdg/L
      7VMklB5C4y/z9lgWx3tHeMAxyc5Ils2FNrpNebzbaeeR5TvQn+8CiZxkz5GdTMainB4d5qnt
      RTjOe4CKKn3oMymGgdG0xrpFbnKeHC/uzlGw1UAoqqEMT5JvmOOl1jgenxmrJLPKNkrbdBFB
      ycnJ2Ryb73mE4pISYJ4RIx6PMzA4iN1uJxwK8dqrr/DIo49dbHH1SVBcXEy1w0FAVdHOR2Rj
      PR3ctmojQtcu+pbUUWu/vgjMzs4yNjZ2sekizLNmzAXnu7z3x+fQNBcT6QSaZsUoSUiCQHcs
      TlxyoqoquVzuqnOnYqEbF4B3du1jYGyaM+0dlLnN7H3lTQypHMvuWsei5UsYHx/H7XZz5MgZ
      WgpkrGYJKOLEzp8z2VHD57/0FL6P8LN/2tDSIXbu/oCq5espdc/v6JIkcefGOzlz9lukMioR
      UyVZvQs0BUnNIug1rOlRZKsVSU2hM8ygVi/F0n0KQziEy25hYO9OXKKejdsKMZKmWIgCYJWy
      tE/G8Vg0zMkB9C49G2sk3LosCcVAJBVhLhGkwHHeDtBb2brhISYHD5F2V9Iz2k9z/ZU+Jyca
      o7Ec4Z4UOsXBTDjDB8cyfMU1yplRmcWlJk5PZMiqZtKKDtXsxyDp2Hb3PWTSaTo6Oznb1UdG
      1hifmkE12rm3ZRENDQ2sWLHilhIbfOnBhzj3i58ROt/WSZFVli2qoblWx5lAhlr79WNEwWCQ
      wqKiBZyrF1TadDLBvZ/bQdOyRl748Y/4cVsXTy9exHuDg5yTrTxcvpyp1PQVqs8FhAODNy4A
      p8ZVTvRkWCVDamqGbfoSPDoTw/va2fn+CcySnpBVIBWOsX/3ILvFNio9Br75H/8v5P63+OBc
      iAdb5smR0DRGu07QOa2xYV0LZt2te+ELodJ7+hB7DhzBPONkWe4cHek80mdO43NvJM827wUp
      KyvjT//kj3n1zZ1MTYpIShKdmiKjcwEiekmmgb0YxQQjUimGeAIpFGNHUmNmNERj6TJy8ggu
      mwu9mmAmZsGnTwEia+oX2j8WYC5r4r1wBYIAoUTkkgAAaBn2dJyjNr+RwT43BZ5Z+gaNzI0P
      cKRzGkthmsbiMtp2D6A3efizB+y8dVZlrakbUdQodugYiCjcs9SBWRLQCxk2igc55v8CLx84
      QyKVRW+2YfM3ojdZKa4UCZw7jMNuX7DIPgk0TWN6uIs5LY/GymKKszKhC8+fSTMyMUmnYKBg
      20cn63l9PrZs3rwg48BqtSLLMrKsYLfbmRrpxl1YzexoF//r3ABOwUjn6Gn2LGlh2/rmq7Ka
      T0xMUFB9E7lAo10niM5odI1/QDCqUFzr4A6/iXKdnXLsaKpGNqoyNRdg70gcjyRjNRXx+gvf
      Q5dfz1NPXooyqfIUr+/uYHGlmQNnPGxbWX2dK38SCPhKqrn/88+AzoTXVk9+OA6SfkEdr9Fo
      ZNGiRXyjrIzst35AemyaMr2Dg9lpwsZCNFHHsvwO7OYki1IjnD6XpGs8wUlFxxeq6/lZ7wlm
      nA42SlkCYz3cYQ9e965emanBIImU51VS7plXRxRVoXt6gK7e42j6MkqMHoZDWd48FOapJgcB
      8xLy8+tRUVmSb2ZLdQkeq4TDJCIpGkWm+V7N/jwjlxdJ6UWV5fZpxOCvOWZ6BntJIxaXlwsJ
      TZqqoFfSeL3eW/bWFTlG95l2AuZKGivzWde0nO6eTkRVpcrupW3f85gf+Au+6f7ojS/P7WZk
      ZGEioCAI+L0+fLKOXTt38dzX/4htPh/pUBiTomCfCjCTKeGO7RupKbw64YPNZkMQbqIk0uPz
      cGYuwBgl/ENLAztHJsB/aecSEDAKEmX+Or7in9f5u3IhOqfGeWzHvTgMlz1ssI/C5dvZ0BDh
      xdbIjd7Cx4CAy1eI6zKWRkfetWvWzCYTty+vpyfQhlfnoCRxFlXNoBNSyKqEKIDLkuCuFlhc
      V0jRWBNeycZjTXdxQAoSjMTwK0PohGvXPrbGfExkPehEgeHgIDajDb/dy3RkhmgwwmLncgTX
      fHuffL2H8UScUFJhValpASPEBeztiuHKjGKxXstdqnGuL8rO4RmKSv47fn85fVIdQlET9orl
      KLk0tzVc6SL8JNDpHdxx5+28fno+Fnzv9u10j4zgcDpovnMzH7zVjzL1DsGZzfh816fQlCSJ
      SCRCa2sry5df8pql02nK86sRslGS04O8fbSfex57iNHOU7y5J8jjX/s6iwuuHUJ3OBz09/ff
      OKN0Tp+Px+tCMXjYrUY5kwsxpaavOV7VNDKkech3lo4X/wftZy4r+LC4iAZGCYUimG5R55Bb
      hTs2bqTo9moGswPsiMywKjZCqTSExxq7OEbTIB4qwS3O66+aoGHQ6ZEVBQGNrLrwtWrAVMbC
      zrlyDoRLL5Y+CprA7PQ0Y0PD2GJ6yo0FSKJ0kVLGLBmp0tVwrNNGx2QOQRCu0M+XFpvJWQoI
      yUauynGlqrTNKGxbbGdLmcLWvCEeMB5EiIxisDpQA13cfvvHq0S7HnLypSCeTqfjz7/6Vf7g
      4UfmA6o6mTxTP0OD/R85jyAINC1bxrHjxxf8/4/++OuciU8xOjLC//7rv+bU0YN859vfJpSV
      ic1O8sG+dznUGbju3D3d3TeeDPfO/sOMzKjEZ/voiqcI2qsIWlWG1BRTcohKaaGbKaZliZhP
      s8I1i01KE+g5yYkpkdGpaSZmMwwc+gVHBjNs374Jp/mzU1omiiJ1DfW4i3wMj4xw2/Q0cVEk
      ZU9jMc6nEGfTKq1nDORpxdgNAp0TA4xoGoXV5Si2IiaFEmJDHbx4ao4wOiwWJ7+YamIo4yOj
      GRFFEQ1wCm7qLZXYJAuSIKKdpzgTPpQ1alTtnBiPUVesYjYsFACrUaS6wMpbwzZq9RNIHz59
      VI1TI2l0OoG9/SmqCvJ4V78D59ovERzu4t7bluD13loSg1wmwPf+/vuc6e5CthZRW+JFFEWU
      TIzRyTkmp4Io+DHo3cQFO36P84rCmMthsVjI83iYCgQIhUJ4PB70ej2SQc/RE4dRVImiAi9f
      +OKXqKut587Nm1i7di1lvmunV5w6dYpDr//yxgXgvdMDTEdVnPlFYMrDWVBGQu9mRrLSqEQp
      lRYeNzpEzioyM5pGky3IWMrIuxkvndkMXefOUGFuw5tno7Fh9S0zvm4lvH4/xatXc3BkGP1k
      iEFJT0q2MBmvonfYxnTOQufYIIlSB8U77qSqyEDT1i+z6a47KF+ymu+9vIuHluo4PpDluLaM
      nOhATsfo72onIuXhtuiQNAMFhvnFJ8tJ3mt7i+6EQrU7j8NtO3m39yQTagaLZQJFDXNsPIfF
      KBBNqeRZpYuLJp7ReHfQxHRcpdoSXqiCiQK5ZI6uoMJAOp941Q6sa59GVVVciRHuumPdLaez
      lHQ2WjbeydbNd1FbcsG2UOhsPUlHTx9bHvwqBTYbmrOAntajFFYtwWq8vjLicjo5dPgwbxz+
      gNbeHtxmC/V1dQz29mCJjWJMzNAbCLGyefXF71wgPb6A4zt/xU9//Tp/87d/z/DQID4heRMV
      YQ4PJnMWMGE3XvJsqIJIWJvXPwfVKMe1eT7KoC+LpdFE+0wlddMhjmfLUHw+EEVUgxGnMYaS
      Osj/+50kTz30HA1XqTb6XcNut/Pwv//3dHZ04AqM09y8BrPFggCMdJ/gxGCKB3fchRIZZdf7
      GgV58+qc2ainZt2jDDrMZNOt1DW2cPrIAYxGGzVlBQzm5k3QmBYjJieQNYWEkuRzjbP0xAaJ
      qT2MylP8+ZocQ+FeHiyc3yCSqo72Pg8hAQLhRnQGHTpBYF9/hna5iX7FS/tEFfc5Wik3RTgY
      KSGl6Mm4DWRb7qOlbjUGoxFV01DGO3jgnq2fGpfrhSq7SwzYEktXbyAWC2Oz2Slbs4mZ4XPM
      TJViuwH3uCAIbN60ifG5WWbtFn7+3m4eyWSoW7yUtuGz6ASNwFAvMB/fUFWV4ydPsmrFiotB
      sJWbH6U/8BNalSQCOQKljbeAF0gQSZ+fplJ0cNI6i3KvDo/JAALE+1MUGlPcq3XxsxE/cb0N
      LRYjIIqMJt0YbzPQ0X3uMykAMB91XNbUxLKmCw0sNMbOHGIo4+XzDzWQnezg9VMhHnr4Pi5q
      J6KBUpuEuaKagqSRxx5/GKNO48QHBy+qPxogiRqnEp2saGlGnUuRH8wQzsS5x9eL3hPm1IBG
      WZEVvajOU7bIOeqN43jMIq8PSsxZQ7htOkrzNLrHfYQMNcSEEv4lXokhliYpufEKszTf8wgO
      6/wikLMZmO7l89vXXTcD85NA0zSyySgpzcS1uEOC/Sc5Oqbjczs2caNecFEUqSoqRh4aIlJU
      yMutJyhDQnYXI4dHUbJZPjh4kGwuRzqdZvXq1fT29rJ06VLe27ePvo4zDB3dSUVhPkJ+AY7G
      +hsXgMneVmJRGza7mUD7u1gLW6h0zSEZVWbNYSazVpyiATWjkoso6MzzR5rk1jM0aadHdaNn
      FrcvgaEix769TozuLMZIAlOmk9nZ2VvqivvUoGmcOnGErhB0d55jpStFT98U/zTUyeNPPEWp
      1wKCxMYdOzhw8BTrNq7DKAnU1zfQ3naUju4pxrNJXNYKasuLCUcitKxZzc5f/DPBqUk6gyq1
      TphMCdT7dQxG5fOX1Xj/XIQZo5EvLrEyMjJLmxzky1vnVU+7MEuIeZqQtN5LGkBTsEgyRuv8
      iR2fnUCc6eHJ++/+VPOzFDnKOy/9klFjLd986kIXyhzvv/pr3j3cxv4BmbX2AGfGk/R0n+OZ
      Lz6Gy3pjRVl+v5/3338ffTSCflEVI4kEyYyGkDbikrIMj4zw1FNPzd+HovCb377M4SNHiI71
      I6SDTMdUKkpsaDXVCJJ04+S4f/W332XX2RQuQ5DJ8VHc7kqaKqco3OZATqjkjstIVgFdkw6j
      V3fxaFVljcRgBlO+HskqzuutAqAqjJ0chIICjKMCq/PX8/DDD3/MV/7ZRDweR1EUbDYb3/nx
      j+mZGaV9Nops0FMgmfj61s34fT7sdjvv/NO/Y3G2jSzgcRmxaTKjMY1KvxHnhaMlI/P2SJba
      4gJOYWF0opc1TQ6CCTvvjN9PVF+2kItTTSF0vkzR1m/SUKQxdmQ3VpMOU+Vt/OXT9131npVc
      jJ0v/oJY/hoe39x01TE3Ai06xuunprn/zpUfPfgm8evfvEguJ3MmMI5r2WKUTJbg8VNkpqYx
      mS38xV/8BcXFxXR3d/OD115BMpvQgrPoigtJpVWsbjsmv+/m4gDZrITHZ2W6bxx/cSFqUsa9
      3ILeIaF3SJju1SOIIHyog7OoE7DXLgx3a5rG4KFeLNVluPQGJoeifDB+gJm5aRrqGli9es0C
      4tPfV0xOTFBeUUE0GuXY8CDh0mJsnvn8f1s4itvtxul0ksvl8JuyLCm4XGGQ8FzDNX8q4cVb
      MsroxPzf7TONxPTFVyGi1VNSVkouNMjipiX8yf/z10x1H6ArdW1CKVEys37jRt7rT32CJ4eZ
      uTDR1NVzcD4pHnrgQV597TV8go5oYBpzgR/3iqXMHD5OOhYnnphvkF5VVYVJA1NdDWjVIIpY
      L3tHmqbduAAsLpAY7D9FNh5kJBBANS1mZtCBvRoEUUC4GU9mZo6z+8dxDobJX1rHoofdaJpG
      38EupsKDvPn9V1jqXcWO7Ttwf0Qx9mcTGuGpITrOdeEtXURn9ykSHjcXGvwKqkrIYmJ8fByX
      08mxt37Cetv4dWdUVZmfHQxyOqqilWSInjAxOummfaCOpTV+bIZp4gY/mnD5TyqRFayUuM3c
      tf42QOHQ6QA7nrzjmtcRRB12m4V5MsyPh1wmwK9+/HPaQzIet4t7bru1yZB6vZ6W5mbGJybI
      z8iEMhl0VivupqUYA9NMBabIc+eRl5eHx2xmengUW2X5gjk0TSM3PnnjKtBPf/A9+kYCjEZB
      R4pkzkxBbZyiO43X9eHeKNSciiaDdN52iA9mkLrslFeXUV/RgM/vR6fTUVxU/BEzfRagMdbf
      TX9vJxW3PUSxXeH//tdvczYXJXTsNKYsVK5s4Zktd9Lf0caqyR9QZErc0My9SRf/X3tnGlzV
      md7539nurqurfb3aJYTQAhZmM8aAFzA2btvddro9Tjvt6e6pVDKTTjKVqeRL11RmMlWpStVk
      amZqJqn0dOxenDi2293u2OD2CoYGbGNAC2jfd+nu27lnmQ8XBBKSfAEbJMzvk5Zz73nvue97
      zvM+y//5bdiLX7XxGK3zpuaQFuaIEaXXkkdcyQJBREnOkTPxEcWt9/O7Tz9ObqyDD2e8PLq1
      fNn317Uw7Uc/4J0uP48fPEBl0eq8Aem6zquvvYYsy5yZmcRSkeoNFu4fJNzdh7ewiCcff5xk
      MsmLv/4lUUVjeCrJXffeRXiij3PHzlJeWJN+HMBU4+S57ZR6LKz3FhANjKGUajg+pzAmXQRJ
      QFSuWEkCqLYYsSIf56fa+GzkFKf7TzHcPUpNRd1Vciw+n+9yHvstR8CdnUtgrAdbwTqyHSL1
      Xi+dZ86Qa8ngu1u85Ld+g02V+XR8eoxG8xwWMT2h14Bm46PcByEiscHImP+8maKFRtFBvh6k
      x1RJSg4aM/188/GDlBZlY3fnkOHMoqq2FMsKl8g04gwNz5GX68buziE37Yr8m4soitTV1dLX
      149TkJhJxJAddiyZbiS7DXtCZWJikgf27kUPhwkNTzPS20Wpw077b09T0drKSFtf+gtgYmSY
      aCRMQlU5P9pPNCNMRq0V2fnlpDhLNhFrjoxkFbF4ZKzZMkquRNA2Q29bP0JUoqCgYH4CJBKJ
      VbQAUkwOdmErWIfHBu6MDDbX1WMPDfGLT4bJMybpO9/G+sBhii3BtJ+icUOibdLDXi0fBzIL
      pf8EsgUrbj3MnDrF8898jU1b7qaiooJcjxOr07Xi5AcQRSvqxbLRDetuvZ7TSkiiRG1NDevr
      6wkPjTLi9yE7HSQDIZ47+DV279qFIAjUVNewbdtWzESCbz/1GMM9A1R4cjD1a+wP4AsEOBvr
      xL3XSoHli/EhG7pOUjWw2BRMQycRTSJbLcgW8apqIUEA2SHhKxnj9e6X+OXJV/i9h79PeVn5
      sjnftwadk4de5YOz/QgXYvzBc1/HbpHQ5vr5eNQkU5/APtyLjojPIhCxKmRIK28YDUPjhQ98
      zCSnieZU8unMIGNRFU92DU/UXM6mlQSBFimTHq2PiYkxGhsbrmnk0WiU8vLlTaTVhiiKiIaB
      Iop8vWkjL737DjG/n+7ubrKysnA6HCSTKolojPjcCMGoQZEnh6qWFiLRayiKT0SDdI+N4rxH
      JjA5h+zOwO250UQ2ncETPfT1R9nzrRYGPmhjbE5DM63sfHIDsrT07UqUBdz1NpJhnd+eOk55
      2Wr7wiS27HuKLfsW/lW22sm1aLw6O0F3aR4u2SAyY+H+WBG/WzhELGkwELaS45TJtcS48uML
      gsS378tlcDTKG4EQWxv2YIb9nPEvlDgEMDCxI+H1XlvPXABJNDj9/q+YsNTw8I71y7ZnXU3I
      ssyBhx8GQFeTvPDTn/LWmU85fPpjWsurCIXn+PCtQ0yHEwTsVTyxZys/+cmrPPX7f5y+CfT6
      C3/PO5P95Lp8dHaFmO6cIKu2EMsNFbOIZHlzSfhD5JZlExr1gcuBJMkUVWVfbJy2AiZEelS2
      b95xA2O4TCwWQ5blL82McngK2LJtG5FwmEl3LzNDE4S0KB09STblWfmXM2H+21A2Izk1ZGs6
      Jdbogtd3DIaZkRQeqohzeCCML+xmS2k5yoImdBoDs5MoVgdSadYKjbaXRkAnGYkw5EtQX1m8
      ZDHJaiYvL4+62hrmJiYJ6jpDUxP4BIG8rVsoqK1m7OwpunoGqaypodpbeA3CWBtbOPLGHAPn
      Z9nyVBPTZ7oIzyZxFd94k20ATBNVA3eBk8ke39KpvYswEiYl+dd+l1uOm/Vlb9u0gxNHjpDT
      UEBsMsCcaPK3CTtjOSLOHJ1IcRz/+MKnq66q/Px0lNIikVNaOSfPd9OSbcUYk7nvYo0vwLRv
      iNc726lsbuX+2tqrzr1UTcGVSLKdyooS2gKzVylorAUkSaK6qprSklJmZ2cxgfaODqaDfgRX
      JmPl5QwMDhJsO0dnT3f6C+BC5wW6zo9TNKXh2xRnriNOfklqwhhxg0hbGBSJjJZr8RokOf9m
      O22nRpiLCBTICfpODqApTj5PLsA0TBLnBXY+cmPKBVdiTUNP/4sgHothSibRkTmCCYXixgy6
      f3GGhGIlMJakYF0exqLPL1ks/OlDuZzU1vPw9nXo99fSP5fkjfYQr6lD7JULyTBMzs4E2VJc
      hCHa6O7qmi+Av4SmaRw7dozW1lacTud8p3lITR7TNFBVFU1VSWr6mpXBt1qtFBenRNlKiovn
      F76maUSjqSdre0dH+iaQJTaDYcth/6YKDv34A3yqheKcTITJGBXHznNAbePcjIJZnb2s7X41
      Erm1hWy4r46y2hyyq4uo3OilurlwRfPH1E0inxk8v//310hcYCGlpV7ee+c3dJ3tJDwXwz+T
      pPbBagqq3GCxklfpZHQ2C+IKIiZW0UARTOwWkd5ELt6iXLJdFgo9Voo8CgGtgulYAH2ykzcH
      J+ic6iWqZNE/3sX6xg3z0WZRFJEkiYqKCuLxOIqiIIoiqqpiGAayLKOpU7z0wutMTQ0zp1qp
      q/h8lbu1wKViIklKtVe12Wx4vd5r8AJlFHNvU+qO/0f//g+Y9fvp7+vhAeUU9TlzHD3np3/O
      xG/K3PNk9WIxsC+UUE+CZ+/7HqUlpZ9/8CpFwU71gUUZsIqVso2pp1CkKM7riUxKxrzUOWKU
      C6MYCIiyBV8kidsmYJFERvxJcl3ZHJvqYyg7i43b8uiYUDCzDYSLkxvg1VdfpaVlI/X1qais
      2+0mGAyi6/qCaLtiLeDbf/iHN+cirAKuy+gVBYG8rCzKvOVEDAuCYTCLzH/ZCTVd3fDWEKo/
      fUm/dDFN8HfEaHJupqLs2jZ3q4nO853MOSdXPEZQRcSkSH2hjW9sL6Oq6W6U4mbm4iIvHR8n
      erFPQSghEk8m0AyVhKThk+IUl5aT7VAwTZOZmRkAGho20NV1Yf79dV3njV/+ip//3xfnTYKv
      Ije0yzEMg3wlAoKAYZg45CTNygx7RZW2IxMM65lM3lWBvWw521qn/6Mu+oeT7H66kaGj7fT1
      h8msLGXTvd6rnyKGSZ5RzNceenJNbtAgpUX692//bzSPuuJx+4VC9m1wYpNTXShdVgvlHpGx
      7lkGZiK82+VkX0Mu/bM2dlSWMuwbZTI4Ol9PDKltlKalbkRNTY00NTWiRuc4euQUIcHOyJl+
      MgUnXRe62LhpeZnG25n0dYF+8wpH5nL4nfoE//PXPVSVF1Bd5CZDToIgUOs0+ZvDU1SWu8mQ
      dLbbRylP+HlpIH+FBSBSsaOe+JFuMHT8fpOW/Y30HO9F10oXpkYACKAo8pqd/ACDQ4P4mAUM
      pk6PMjMeA4eL/ByD6ZEYoZk4G57cgE0WyF5cKaUlURUH324m87oAAA6LSURBVNpXx9++1smR
      PglZFPmXwBts9jYz6Z9AFwwkETANEgl1gbo0mIz09RGZ7efwxzPcaynAxGRyYnLBMYGpQd4/
      do5d+w5iS4zy8kuvIBU1841H78Oa9v5ubZC2CWQW1GIxYsxN+qjbtIm7NzYjqkEUQQdBoKk2
      k//0UAFPr7MjCKmorV3SsKgq6nQSI7ZUrssVKgeiQt3WIoZPDzE7FZ0vEF90OKZoLpDJu5nE
      YrF5j8n1cqb7NJpLBQTyNpZSs7OUDI9MTmMpdbtKKGopxuEUl/r0YLHRWJLJX7zSzumJGLIg
      IgsChqEyO9lFR9vHjKQygQnNjvLuyXNUV1+OEk9OTvHxmV6OvvMxtXoudsnKSHIKeVGwKxiM
      kWnTCKkQ9IfZ98x3KZXGGJ79ctKbbyVpL4Caoix6hmcZIAtnbJLPPjnORETAWOEtPHKCA7E2
      mt7/lGj/Uum1OqOnBxhqG6PrzATxkIok6GSVFyAvEWAzNTATN89fvxhFUW44SDY2MYY8Z0WM
      yKjjIWZ64hRV5yOqIsGhABleNwLw3mQPf/WPR/jJ8ZH5hhzDviQ/7fAT9ASwtVqZLfURFlQk
      AQaTCaqKU5tZPRlj2G9w77275l2BAP/0Dz9DPefDq2VgEVO1B6YMDU0brhihgLdmPVmO1FM2
      v7yG6fMn0LPW4835gmI+q4i0bYnqsgIePPAI91dq/N3PfkXE76OmKIZFXP6OKAqQmBjhk8Ek
      nx0foupPvkZx6ZUXUSCj0MOmA02INisuh0ChxUFmUeYCW/YSesIgP+PWueW+CNOr2FLAtmEn
      w+Ysvzh5iLjFxvSAyYHKEg6PBijKzESIm3S2TyOUraftRD9jiQw2Fyu87wswsi5BppqDI8eO
      KkWRQwrOkAWMBJIAgqxgRgcoqq4l6pvgeMcI2xtK6e7uRgmYzIx08OnoCEzGebh5C57yPAoK
      lm7SATB++gOmXfXsXl/8pXr2bhVpf6Oljbv40waQRZOGLQ/wsxd+zFz3aSYSds6eGWDKauO7
      m5y89bGPrqBORq6DZxtdVFd4+J4X/senbtyuxXduEXeRhyurU/PcywfS4n0GrfdsvsaPuLpo
      3rSRUN9x7ha9tNz9HEnTQBAk7LLMnvI6orMa/2xpR8vW8df48RthTurTtKs6elESRbAynwiu
      g5yQEYDAzCjnuwbxrC/j+//1RxRkWnj55Ze5qzbVmqm8vBxdMams2ExlReoaxowElbVVi56o
      OicPvcIHZ1KJfA/U2vjkvZ/z6fs5/JtnvkmhJ6VQt5qybm+E9G9pojTf78vpcqEoCk7JpDOS
      y8HWAG/1p1Ti9rVmsTWo8o89Wfyv4XoCuoPkbD8zOUW0eq7/DmqaJg7DdV0JXquJ1q1beOnY
      aXImwKJYuPJ5aJVkEoaOYdWxOhMMj08SC6u4GuOI0ymTRc+8wg4XwVB0UMFTUsV//7Mf0tx8
      uYXS888/P/+zxWJBvXjsJaZUH3taHls0Qokt+55my75UZmgsHuM/7r58jGma9Pf3U1W1ulOl
      0+W6jWlBlkmakDCu3EAJTEzHODpuEsluICZ4sEgiQz6JwtIbS5+OjWpsr7lvTXuALnH3wfsZ
      0FbWRM1pLkbWNAo2FqFYTRLFIWaPTTDc5gcMps+McP7NHiYv3nisVtuCPm2LGR8bw/SHGfal
      hHvVeID28W4k19Xtj0KhEN3d3YyNjeH3+xf8TxCE22Lyv/322/y/l35+/QtAUSwoAgxGM3jj
      0wCH203e6BP58ckIk4EkF0YvBVcEyivK0GMmsYkkevzaPTimYRJrN9i5Y+f1DndVUVVdTbKh
      iIS58FpopsGwFkITdARZJr8hH1fmRYNHAFujFcu0DcukgyxXKS2V9WjBix3u/T5OnDix7DkP
      vf4GwfEQPeMDgMapCyeo2lDEy68dvupYPR7g+LHjFJXVoM8N8uKLL/Liy79kNrRy7GItEAwG
      efPwYY4O9DDqtl/fAjBNk2QsgiyYWESZrrx7+c5/2Il3913UHNjHg8/tZH2FO+WDFiTsVgU5
      ALP/GmLmaBhTXznV0zRTciqhvgT+thgzH0b5+v3pdRNcCwiCwK6D+xnWggv+HjGTfOjoJ1Qa
      vPo1iNgzrBQkE/xebJxvRuaYOB2hqjyVDiIKApFweMnzpb4vnZbKJlyKBGaMGcHB0888j0da
      fC6DqdFRPC6F2Rh4193Fvof2Yov50aW1//R9/8MPOdLXjbWyHMlqvb5IsK7rJONRZAGyFBCc
      btZXmsgSNF90Oz9/EH7xYZIZn4SAiOXiRis6qhHojJPZYENYwq1g6iaRQRV9SGb7ut1kF+eQ
      vSWbmprlpTzWIrIioy/O+TZTcQ4kk+kzw8yMJTBlmepd5dhMgQ3nI7jFXryyg/bBIAUFezB1
      DZAwTZaOHZBacM333EX/a59dPI2E4BBwZ7lJXuXEE6nbuJVYcAoAe4YHNTiGvayJfMfaqg1Y
      jGmaRFUVZ4V3fhN/Y0tagFlJ4bFdqcl/Jfkeg9bCAf65y0dYrKA4O5fg1BCDIRu1yTzcdVaE
      RQWqumqgdSg8VP8IZVvKFviwbzdEUUJdFOkWEZAMAUzIa/aSW6cx2jmLxZBpGE1SGe1BFaE/
      oFPpkemaPc9Eoh671YLdlUFLy/JCVooC755+m6lAlAkTaqrd/Oj//B0tD/7OiuM0TYOzn7TR
      vPf2EC2LRCOY9st+x+taAJFIhLGRYYqA0kIoWabHQWlFNn+5KZ9/enMUUbFwqDOIISrIokmk
      M7agdsA0TJKdMs/u/s58473bGYfTgeTNwRjW5/3rVkHCE3LhiwYwZYOsUwmijnyKxyx8z92D
      reWyUpYv18NvJzZhFVxs3XEP9+7ataK0ZFPTXTz1R9+n91wXpXXl7H5gD66MpeRwUm7QQ8fO
      InXE+MFz+yGnijLX2jd/AoEAvZ2diDWVOMtSpuN1m0CmGkWypLqTL41Ilh0OfTjGxk0l/MOL
      0xSUeBmZjFLnNYhMx4DLC8BImlj8zq/E5IdUUC2ztIDQ4ACZ0mVnqKiLKDM2qowIxWovf1yb
      iUM0sS4KOB4JVyNW3YPWd4Zt27d/rq6qoig88PCD7Nxz7+fI0V9yg17ec927xmMvl8jMzCQj
      M5PYFebKdRl1A/39uASNgCFSvpyVYuq8+9EY6xry0WJgkYOMDrcTC/WCW8PvWSR9aICg3R7B
      lXSpbd6AHxXNNOdLQCtsQZ7Vx/h39gs0lyjkW5K4ZO0q2ZRNjhHk/g+oKcqgsLAwrfMJgrAq
      ezHcLARB4OF9+xeU217zAjBNk/PtZ1FEE0+xxF215tKaNqZJplvmk09GGZrz89d/tp4f/edm
      tu3dxGx5Hp7NCx+/esKkrq7uWoezpvGWlWFsLOOd2AUm9Qg+I4FbiXB35hQ2RWRd/kLxr4Bm
      5US4BNUQ8Vr8fCvvHHkllbdNVPZmsL6+nlwdzItJjddsApmmiX9uDlOAphpYNi4lymzfUcH2
      i79qOhxqt+PenYUle+GLDNXA1pfNnqf2Xutw1jSyLLPtod0Ee9/AYp7Bn3Sy0zOy5LEhTeGn
      xv1EKuvx9/+anbZeTtoe5NGDT9zkUa9trFYrjZVVHJ2dwOLJvD4TSJEEVFNM5Z2ngWnCiU6B
      tmkFySEuylGHQGecx3Y9jsv5+Rqltxu5eXnY1j1AlcPP7pwB7NLSlXSyYKAKMpbhLhos47zr
      r+CRf/vnOF1fns7/7UpVRQVaJBWovS4TqLfrAg6PSFlBGtolpBbA3JSNH3hq0P41TrT/cqGG
      6tdZ52ymsnLth9evl133P8zx0Mqbf5uo813xTZ4Rf4NmSKx79Ac4natTt3O1k5WVhT2WwDRW
      SuZfAYfbg6mbGOnNfzQDonMOimx2/rxsHY/25pA8nyQxp5E1VMI3Hnn6K23H5ubmQs3+q9qr
      XokggFNMEsSN+OBf0br9vq/0NbsRPJmZOA0TQ01e3wKQjCShMPiujtgvSVID+Yqo70aPh9Je
      Bb3NwtOPfgubde03w7hRYtP9V7c4vQLdFOiIFyHt+SGNm2+PnKhbha7raLoOwnXGAdRoiGzF
      YHBSojDn8x8Dw1MCNY6MBXnkpinzxANPkuVZnfrzN5uM0gbG+z6g1BYhrktMqA6mVTt2ScOf
      tJEo3UX1rt00bb7nVg91zTM2Ps4cBk5FufYF8NHRo2TJOoYkUpTG5AfIyjB5LTrHbMCKO5FA
      FgWa9z/Khvqmax787Upz6w7eG+nFOtNOVtMBquob2VxZT9eF8zSXlFBQUHhbpIKvBooKC9lU
      VcOnfYPpd4i5xF//5Q/JDA2hZSk8u3+ZGMAS9I+Dz/ZNWjdvIRKJpB28+aoRj8dvi/5oa4GO
      jo5r2wP09PQgBidJIlC6TP7PcuRnwczIJ4iiuOon/2I37c3kzuS/eTQ0NFzbAvjwvXdwkCBs
      StRXpn/3h1SBfFIzrmpttNowTZOJiYlbJr1yh5tL2gsgFAoxPjyEIoBpGMTV9Ge/rsPHXTY2
      3/ME6Qjx3mry8/PXnC7+Ha6PtHdVLpeLdU0tzJ4cw6IIWJXlzYSkBu+dFrFY7cwGJWRXHfft
      2Yd31XVyuZpLCsJ3+GqQ9gIQBAGb1YqBgOCSKM5d2USYjuTy7Wf+Yk1HKw3DmJfVvsPtSdoL
      IBwO0/3ZCWyYeJdJgZgNgCiCJELCcK/pyQ8pWRCbzXbH/Xgbk/Y36/P5iIVDxDSZimVSyo+2
      SUiuDWR53DxycPvSB60hrsU9fIe1SdoLIB6LMRtNkjRFkklYqgQ722UwmVSoa9y5QJT1DndY
      raTt6hgYGEAzTERBwFuwtP1fmAOjQxeQ0s2TvsMdbjFpz9SxsTE0JHIUjQtDV7/MNGEm7uU7
      3/sTKirWbveWO3y1SHsBGKaJYZroBgxMQDS+8P9JDXwRhbz8/C96jHe4w5eGrKoq4WUUxa7E
      6/UiiiLZio5pExEzTZIX3eWmCYNBgc07tpNMJkkmb79GCne4Pfn/qzDr2SYtR4MAAAAASUVO
      RK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
